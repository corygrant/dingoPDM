{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dingoPDM","text":""},{"location":"#dingopdm","title":"dingoPDM","text":"<p>dingoPDM and dingoPDM-Max are open source Infineon Profet based Power Distribution Modules. </p> <p> Getting Started </p> <p></p> <p></p> <p></p> <p></p>"},{"location":"firmware/can/","title":"CAN","text":"<p>Info</p> <p>To reduce complexity, USB uses the same message format as CAN</p> <p>dingoPDM sends the same messages over CAN and USB </p> <p>dingoPDM can also receive the same settings change messages over USB</p> <p>There is no difference in message formatting between CAN and USB</p>"},{"location":"firmware/can/#dbc","title":"DBC","text":"<p>DBC files can be found in the firmware repo here</p> <p>Info</p> <p>DBC files are built using the python dbc_builder in the <code>dbc_builder</code> folder</p>"},{"location":"firmware/can/#input","title":"Input","text":"<p>CAN input format is not restricted or defined by the firmware. </p> <p>The handling of CAN inputs is defined by the user using DingoConfigurator. </p> <p>Warning</p> <pre><code>If timeout is enabled, CAN messages must be received at least every timeout interval or the input will be set to 0\n</code></pre> <ul> <li>ID:<ul> <li>CAN ID of the message to evaluate </li> <li>11-bit standard IDs and 29-bit extended IDs are valid</li> </ul> </li> <li>Start Byte:<ul> <li>First byte of the message to evaluate</li> </ul> </li> <li># Bytes:<ul> <li>1 or 2 bytes</li> <li>Number of bytes to evaluate</li> </ul> </li> <li>Operator:<ul> <li><code>Equal</code>:<ul> <li>Result = Byte value(s) == Arg</li> </ul> </li> <li><code>Not Equal</code>:<ul> <li>Result = Byte value(s) != Arg</li> </ul> </li> <li><code>Greater Than</code>:<ul> <li>Result = Byte value(s) &gt; Arg</li> </ul> </li> <li><code>Less Than</code><ul> <li>Result = Byte value(s) &lt; Arg</li> </ul> </li> <li><code>Greater Than or Equal</code>:<ul> <li>Result = Byte value(s) &gt;= Arg</li> </ul> </li> <li><code>Less Than or Equal</code><ul> <li>Result = Byte value(s) &lt;= Arg</li> </ul> </li> <li><code>BitwiseAnd</code><ul> <li>Result = Byte value(s) &amp; Arg</li> </ul> </li> <li><code>BitwiseNand</code><ul> <li>Result = !(Byte value(s) &amp; Arg)</li> </ul> </li> </ul> </li> <li>Mode:<ul> <li><code>Momentary</code><ul> <li>Result true when message solves to true</li> </ul> </li> <li><code>Latching</code><ul> <li>Result transitions between true/false when message solves to true</li> </ul> </li> </ul> </li> <li>Timeout:<ul> <li><code>Enable</code><ul> <li>When enabled, messages must be received before the timeout expires</li> <li>If the timeout expires, the result will be false</li> </ul> </li> </ul> </li> </ul>"},{"location":"firmware/can/#input-examples","title":"Input Examples","text":"<ul> <li> <p>Blink Marine Button 1 (Message 405, byte 0, bit 0)</p> <ul> <li>ID = 405</li> <li>Start Byte = 0</li> <li>Num Bytes = 1</li> <li>Operator = BitwiseAnd</li> <li>Arg = 1</li> <li>Mode = Latching or Momentary</li> </ul> </li> <li> <p>CANBoard Rotary Switch 4 at Position 2, Base ID 0x640 (Message 1602, byte 1 (high nibble))</p> <ul> <li>ID = 1600</li> <li>Start Byte = 1</li> <li>Num Bytes = 1</li> <li>Operator = Equal</li> <li>Arg = 32 = (2 &lt;&lt; 4)</li> <li>Mode = Momentary</li> </ul> </li> <li> <p>CANBoard Analog In 2 &gt; 500mV, Base ID 0x650 (Message 1616, byte 2-3)</p> <ul> <li>ID = 1616</li> <li>Start Byte = 2</li> <li>Num Bytes = 2</li> <li>Operator = GreaterThan</li> <li>Arg = 500</li> <li>Mode = Momentary</li> </ul> </li> </ul>"},{"location":"firmware/can/#output","title":"Output","text":"<p>dingoPDM sends output, input and device information over CAN (and/or USB) cyclically. </p> <p>Note</p> <p>Default output transmit is every 100ms (10Hz)</p> <p>Warning</p> <p>The output format is under development and subject to change</p> <p>Note</p> <p>Messages not marked as always sent are only sent when their contents are enabled</p> Always Sent CAN ID DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Base ID + 0 8 DI DS TC TC BV BV BT BT Base ID + 1 8 OC1 OC1 OC2 OC2 OC3 OC3 OC4 OC4 Base ID + 2 8 OC5 OC5 OC6 OC6 OC7 OC7 OC8 OC8 Base ID + 3 8 OS12 OS34 OS56 OS78 WO WSS FIO 0 Base ID + 4 8 OR1 OR2 OR3 OR4 OR5 OR6 OR7 OR8 Base ID + 5 8 CI CI CI CI VI VI 0 0 Base ID + 6 8 CNT1 CNT2 CNT3 CNT4 CON CON CON CON Base ID + 7 8 CIV1 CIV1 CIV2 CIV2 CIV3 CIV3 CIV4 CIV4 Base ID + 8 8 CIV5 CIV5 CIV6 CIV6 CIV7 CIV7 CIV8 CIV8 Base ID + 9 8 CIV9 CIV9 CIV10 CIV10 CIV11 CIV11 CIV12 CIV12 Base ID + 10 8 CIV13 CIV13 CIV14 CIV14 CIV15 CIV15 CIV16 CIV16 Base ID + 11 8 CIV17 CIV17 CIV18 CIV18 CIV19 CIV19 CIV20 CIV20 Base ID + 12 8 CIV21 CIV21 CIV22 CIV22 CIV23 CIV23 CIV24 CIV24 Base ID + 13 8 CIV25 CIV25 CIV26 CIV26 CIV27 CIV27 CIV28 CIV28 Base ID + 14 8 CIV29 CIV29 CIV30 CIV30 CIV31 CIV31 CIV32 CIV32 Base ID + 15 8 ODC1 ODC2 ODC3 ODC4 ODC5 ODC6 ODC7 ODC8 Base ID + 16 8 K1B1 K1B2 K1B3 K2B1 K2B2 K2B3 0 0 Base ID + 17 8 K1D1 K1D1 K1D2 K1D2 K1D3 K1D3 K1D4 K1D4 Base ID + 18 8 K2D1 K2D1 K2D2 K2D2 K2D3 K2D3 K2D4 K2D4 <ul> <li>Base ID + 0<ul> <li><code>DI</code> - Digital Inputs<ul> <li>Bit 0 - Input 1</li> <li>Bit 1 - Input 2</li> </ul> </li> <li><code>DS</code> - Device State<ul> <li>Bits 0 to 3<ul> <li>Device State<ul> <li>0 = <code>Run</code></li> <li>1 = <code>Sleep</code></li> <li>2 = <code>Overtemp</code></li> <li>3 = <code>Error</code></li> </ul> </li> </ul> </li> <li>Bits 4 to 7<ul> <li>PDM Type<ul> <li>0 = dingoPDM</li> <li>1 = dingoPDM-Max</li> </ul> </li> </ul> </li> </ul> </li> <li><code>TC</code> - Total Current (Amps * 10)<ul> <li>2 bytes</li> </ul> </li> <li><code>BV</code> - Battery Voltage (V * 10)<ul> <li>2 bytes</li> </ul> </li> <li><code>BT</code> - Board Temperature (deg C * 10)<ul> <li>2 bytes</li> </ul> </li> </ul> </li> <li>Base ID + 1<ul> <li><code>OC1</code> to <code>OC4</code> - Output n Current (Amps * 10)<ul> <li>2 bytes each</li> </ul> </li> </ul> </li> <li>Base ID + 2<ul> <li><code>OC5</code> to <code>OC8</code> - Output n Current (Amps * 10)<ul> <li>2 bytes each</li> </ul> </li> </ul> </li> <li>Base ID + 3<ul> <li><code>OSxy</code> - Output States x/y<ul> <li>Bits 0 to 3 - State x</li> <li>Bits 4 to 8 - State y<ul> <li>0 = <code>Off</code></li> <li>1 = <code>On</code></li> <li>2 = <code>Overcurrent</code></li> <li>3 = <code>Fault</code></li> </ul> </li> </ul> </li> <li><code>WO</code> - Wiper Outputs<ul> <li>Bit 0 - Wiper Slow Speed Output</li> <li>Bit 1 - Wiper Fast Speed Output</li> </ul> </li> <li><code>WSS</code> - Wiper State and Speed<ul> <li>Bits 0 to 3 - Wiper Speed<ul> <li>0 = <code>Park</code></li> <li>1 = <code>Slow</code></li> <li>2 = <code>Fast</code></li> <li>3 = <code>Intermittent Speed 1</code></li> <li>4 = <code>Intermittent Speed 2</code></li> <li>5 = <code>Intermittent Speed 3</code></li> <li>6 = <code>Intermittent Speed 4</code></li> <li>7 = <code>Intermittent Speed 5</code></li> <li>8 = <code>Intermittent Speed 6</code></li> </ul> </li> <li>Bits 4 to 8 - Wiper State<ul> <li>0 = <code>Parked</code></li> <li>1 = <code>Parking</code></li> <li>2 = <code>Slow</code></li> <li>3 = <code>Fast</code></li> <li>4 = <code>Intermittent Pause</code></li> <li>5 = <code>Intermittent On</code></li> <li>6 = <code>Wash</code></li> <li>7 = <code>Swipe</code></li> </ul> </li> </ul> </li> <li><code>FIO</code> - Flasher Inputs/Outputs<ul> <li>Bit 0 - Out 1</li> <li>Bit 1 - Out 2</li> <li>Bit 2 - Out 3</li> <li>Bit 3 - Out 4</li> </ul> </li> </ul> </li> <li>Base ID + 4<ul> <li><code>OR1</code> to <code>OR8</code> - Output n Reset Count</li> </ul> </li> <li>Base ID + 5<ul> <li><code>CI</code> - CAN Input Results<ul> <li>Byte 0 - Inputs 1 to 8</li> <li>Byte 1 - Inputs 9 to 16</li> <li>Byte 2 - Inputs 17 to 24</li> <li>Byte 3 - Inputs 25 to 32</li> </ul> </li> <li><code>VI</code> - Virtual Input Results<ul> <li>Byte 4 - Inputs 1 to 8</li> <li>Byte 5 - Inputs 9 to 16</li> </ul> </li> </ul> </li> <li>Base ID + 6<ul> <li><code>CNT1</code> to <code>CNT4</code> - Counter Values</li> <li><code>CON</code> - Condition Results<ul> <li>Byte 4 - Conditions 0 to 8</li> <li>Byte 5 - Conditions 9 to 16</li> <li>Byte 6 - Conditions 17 to 24</li> <li>Byte 7 - Conditions 25 to 32</li> </ul> </li> </ul> </li> <li>Base ID + 7 TO Base ID + 14<ul> <li><code>CIV1</code> to <code>CIV32</code> - CAN Input Values<ul> <li>2 bytes each</li> </ul> </li> </ul> </li> <li>Base ID + 15<ul> <li><code>ODC1</code> to <code>ODC8</code> - Output Duty Cycle (%)</li> </ul> </li> <li>Base ID + 16<ul> <li><code>K1B1</code> - Keypad 1 Buttons 1-8</li> <li><code>K1B2</code> - Keypad 1 Buttons 9-16</li> <li><code>K1B3</code> - Keypad 1 Buttons 17-20</li> <li><code>K2B1</code> - Keypad 2 Buttons 1-8</li> <li><code>K2B2</code> - Keypad 2 Buttons 9-16</li> <li><code>K2B3</code> - Keypad 2 Buttons 17-20</li> </ul> </li> <li>Base ID + 17<ul> <li><code>K1D1</code> - Keypad 1 Dial 1 Ticks</li> <li><code>K1D2</code> - Keypad 1 Dial 2 Ticks</li> <li><code>K1D3</code> - Keypad 1 Dial 3 Ticks</li> <li><code>K1D4</code> - Keypad 1 Dial 4 Ticks</li> </ul> </li> <li>Base ID + 18<ul> <li><code>K2D1</code> - Keypad 2 Dial 1 Ticks</li> <li><code>K2D2</code> - Keypad 2 Dial 2 Ticks</li> <li><code>K2D3</code> - Keypad 2 Dial 3 Ticks</li> <li><code>K2D4</code> - Keypad 2 Dial 4 Ticks</li> </ul> </li> </ul>"},{"location":"firmware/can/#settings","title":"Settings","text":"<p>To change configuration settings on the PDM, settings messages must be sent over CAN (or USB). </p> <p>These settings messages have a prefix that is sent in the first byte of the message. </p> <p>They must also be sent with a special CAN message ID, Base ID - 1</p> <p>Warning</p> <p>Only messages with the ID = Base ID - 1 will be evaluated for settings changes</p> <p>For every valid settings message, a response message will be sent back. </p> <p>The response message will be the prefix + 128 and will respond on ID = Base ID + 30</p> Setting Prefix Response <code>CAN</code> 1 129 <code>Inputs</code> 5 133 <code>Outputs</code> 10 138 <code>Outputs PWM</code> 11 139 <code>Virtual Inputs</code> 15 143 <code>Wiper</code> 20 148 <code>Wiper Speed</code> 21 149 <code>Wiper Delays</code> 22 150 <code>Flashers</code> 25 153 <code>Starter Disable</code> 30 158 <code>CAN Inputs</code> 35 163 <code>CAN Inputs IDs</code> 36 164 <code>Counters</code> 40 168 <code>Conditions</code> 45 173 <code>Version Info</code> 120 248 <code>Sleep</code> 121 249 <code>Enter Bootloader</code> 125 253 <code>Burn Settings</code> 127 255"},{"location":"firmware/can/#can","title":"CAN","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 1 Set 4 1 SPE IDH IDL Response 4 129 SPE IDH IDL <ul> <li><code>SPE</code><ul> <li>Bit 0 = Sleep enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = CAN filters enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 4 to 7 = CAN speed<ul> <li>0 = <code>1000K</code></li> <li>1 = <code>500K</code></li> <li>2 = <code>250K</code></li> <li>3 = <code>125K</code></li> </ul> </li> </ul> </li> <li><code>IDH</code> - Base ID high byte</li> <li><code>IDL</code> - Base ID low byte</li> </ul>"},{"location":"firmware/can/#input_1","title":"Input","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 5 NUM Set 4 5 INS DBT PUL Response 4 133 INS DBT PUL <ul> <li><code>NUM</code> - Input number</li> <li><code>INS</code><ul> <li>Bit 0 = Input enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1-2 = Mode<ul> <li>0 = <code>Momentary</code></li> <li>1 = <code>Latching</code></li> </ul> </li> <li>Bit 3 = Invert input logic</li> <li>Bit 4-7 = Input number</li> </ul> </li> <li><code>DBT</code> - Debounce time (ms / 10)</li> <li><code>PUL</code> - Pullup/pulldown<ul> <li>0 = <code>No pull</code></li> <li>1 = <code>Pullup</code></li> <li>2 = <code>Pulldown</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#output_1","title":"Output","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 10 NUM Set 8 10 NUM IN CL RES RT INL INT Response 8 138 NUM IN CL RES RT INL INT <ul> <li><code>NUM</code><ul> <li>Bit 0 = Output enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 4-7 = Output number</li> </ul> </li> <li><code>IN</code> - Input number (see Variable Map)</li> <li><code>CL</code> - Current limit (A)</li> <li><code>RES</code><ul> <li>Bit 0-3 = Reset Mode<ul> <li>0 = <code>None</code></li> <li>1 = <code>Count</code></li> <li>2 = <code>Endless</code></li> </ul> </li> <li>Bit 4-7 = Reset Count Limit</li> </ul> </li> <li><code>RT</code> - Reset time (ms / 10)</li> <li><code>INL</code> - Inrush limit (A)</li> <li><code>INT</code> - Inrush time (ms / 10)</li> </ul>"},{"location":"firmware/can/#output-pwm","title":"Output PWM","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 11 NUM Set 8 11 NUM IN FRQ FDC SSR SSR DCI Response 8 139 NUM IN FRQ FDC SSR SSR DCI <ul> <li><code>NUM</code><ul> <li>Bit 0 = PWM enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = Soft start enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 2 = Variable duty cycle<ul> <li>0 = <code>Fixed duty cycle</code></li> <li>1 = <code>Variable duty cycle</code> </li> </ul> </li> <li>Bit 4-7 = Output number</li> </ul> </li> <li><code>IN</code> - Duty cycle input number (see Variable Map)<ul> <li>CAN Input Values are the only valid inputs</li> <li>All other input values are boolean</li> </ul> </li> <li><code>CL</code> - Current limit (A)</li> <li><code>FRQ</code>- PWM base frequency (Hz)<ul> <li>9 bit value</li> <li>Bits 1-8 in Byte 3</li> <li>Bit 0 in <code>FDC</code></li> </ul> </li> <li><code>FDC</code> - Fixed duty cycle (%)<ul> <li>Bit 0 = PWM base frequency bit 0</li> <li>Bits 1-8 = Fixed duty cycle</li> </ul> </li> <li><code>SSR</code> - Soft start ramp time (ms)</li> <li><code>DCI</code> - Duty cycle denominator<ul> <li>0 to 255</li> <li><code>IN</code> / <code>DCI</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#virtual-input","title":"Virtual Input","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 15 NUM Set 7 15 NOT NUM VR0 VR1 VR2 MDC Response 7 143 NOT NUM VR0 VR1 VR2 MDC <ul> <li><code>NUM</code> - Virtual input number</li> <li><code>NOT</code><ul> <li>Bit 0 = Virtual input enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = Not variable 0<ul> <li>0 = <code>No invert</code></li> <li>1 = <code>Invert</code></li> </ul> </li> <li>Bit 2 = Not variable 1</li> <li>Bit 3 = Not variable 2</li> </ul> </li> <li><code>VR0</code> - Variable 0 (see Variable Map)</li> <li><code>VR1</code> - Variable 1 (see Variable Map)</li> <li><code>VR2</code> - Variable 2 (see Variable Map)</li> <li><code>MDC</code><ul> <li>Bit 0-1 = Condition 0<ul> <li>0 = <code>And</code></li> <li>1 = <code>Or</code></li> <li>2 = <code>Nor</code></li> </ul> </li> <li>Bit 2-3 = Condition 1</li> <li>Bit 6-7 = Mode<ul> <li>0 = <code>Momentary</code></li> <li>1 = <code>Latching</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"firmware/can/#wiper","title":"Wiper","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 20 Set 8 20 CLM SIN FIN IIN OIN PIN WIN Response 8 148 CLM SIN FIN IIN OIN PIN WIN <ul> <li><code>CLM</code><ul> <li>Bit 0 = Wiper enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1-2 = Mode<ul> <li>0 = <code>Dig</code> Digital inputs for speed<ul> <li>Must use at least <code>Slow</code> and <code>Park</code> inputs</li> <li><code>Fast</code> and <code>Intermittent</code> inputs optional</li> </ul> </li> <li>1 = <code>Int</code> Integer speed input to select slow/fast/intermittent/park. Digital input for park<ul> <li>One speed input value must be park (<code>0</code>)</li> <li>Must use <code>Speed</code> and <code>Park</code> inputs</li> <li>Use case: Rotary switch to select wiper on/speed</li> </ul> </li> <li>2 = <code>Mix</code> Integer input for slow/fast/intermittent. Digital inputs for on and park<ul> <li>Must use <code>Speed</code>, <code>On</code> and <code>Park</code> input</li> <li>Use case: Rotary switch to select speed, latching button to turn wipers on/off</li> </ul> </li> </ul> </li> <li>Bit 3 = Park level<ul> <li>0 = Stop when input is low</li> <li>1 = Stop when input is high</li> </ul> </li> <li>Bit 4-7 = Wash cycles count, number of swipes after wash</li> </ul> </li> <li><code>SIN</code> - Slow speed input (see Variable Map)</li> <li><code>FIN</code> - Fast speed input (see Variable Map)</li> <li><code>IIN</code> - Intermittent speed input (see Variable Map)</li> <li><code>OIN</code> - On input (see Variable Map)</li> <li><code>PIN</code> - Park input (see Variable Map)</li> <li><code>WIN</code> - Wash input (see Variable Map)</li> </ul>"},{"location":"firmware/can/#wiper-speed","title":"Wiper Speed","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 21 Set 7 21 SWI SPI S01 S23 S45 S67 Response 7 149 SWI SPI S01 S23 S45 S67 <ul> <li><code>SWI</code> - Swipe input (see Variable Map)</li> <li><code>SPI</code> - Speed integer input (see Variable Map)</li> <li><code>S01</code><ul> <li>Bit 0-3 = Speed map 0</li> <li>Bit 4-7 = Speed map 1 </li> </ul> </li> <li><code>S23</code><ul> <li>Bit 0-3 = Speed map 2</li> <li>Bit 4-7 = Speed map 3</li> </ul> </li> <li><code>S45</code><ul> <li>Bit 0-3 = Speed map 4</li> <li>Bit 4-7 = Speed map 5</li> </ul> </li> <li><code>S67</code><ul> <li>Bit 0-3 = Speed map 6</li> <li>Bit 4-7 = Speed map 7</li> </ul> </li> <li>Speed map values are used when <code>Mode</code> is set to <code>Int</code> or <code>Mix</code></li> <li>The values of the speed map correspond to different speeds/states when the <code>Speed</code> input has that value<ul> <li>0 = <code>Park</code></li> <li>1 = <code>Slow</code></li> <li>2 = <code>Fast</code></li> <li>3 = <code>Intermittent 0</code></li> <li>4 = <code>Intermittent 1</code></li> <li>5 = <code>Intermittent 2</code></li> <li>6 = <code>Intermittent 3</code></li> <li>7 = <code>Intermittent 4</code></li> <li>8 = <code>Intermittent 5</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#wiper-delay","title":"Wiper Delay","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 22 Set 7 22 IT0 IT1 IT2 IT3 IT4 IT5 Response 7 150 IT0 IT1 IT2 IT3 IT4 IT5 <ul> <li><code>ITn</code> - Wiper intermittent time (ms / 100)</li> </ul>"},{"location":"firmware/can/#flasher","title":"Flasher","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 25 NUM Set 6 25 NUM IN ON OFF Response 6 153 NUM IN ON OFF <ul> <li><code>NUM</code><ul> <li>Bit 0 = Flasher enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = Single/continous flash</li> <li>Bit 4-7 = Flasher number</li> </ul> </li> <li><code>IN</code> - Flasher input (see Variable Map)</li> <li><code>ON</code> - Flash on time (ms / 10)</li> <li><code>OFF</code> - Flash off time (ms / 10)</li> <li></li> </ul>"},{"location":"firmware/can/#starter-disable","title":"Starter Disable","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 30 Set 4 30 EN IN OUT Response 4 158 EN IN OUT <ul> <li><code>EN</code><ul> <li>Bit 0 = Starter disable enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> </ul> </li> <li><code>IN</code> - Starter disable input (see Variable Map)</li> <li><code>OUT</code> - Starter disable outputs<ul> <li>Bit 0 = Output 1</li> <li>Bit n = Output n+1</li> <li>Bit 7 = Output 8</li> </ul> </li> </ul>"},{"location":"firmware/can/#can-input","title":"CAN Input","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 35 NUM Set 7 35 NUM OME POS ARG ARG TIM Response 7 163 NUM OME POS ARG ARG TIM <ul> <li><code>NUM</code> - Input number</li> <li><code>OME</code><ul> <li>Bit 0 = Input enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 to Bit 2 = Mode<ul> <li>0 = <code>Momentary</code></li> <li>1 = <code>Latching</code></li> </ul> </li> <li>Bit 3 = Timeout enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 4 to 7 = Operator<ul> <li>0 = <code>Equal</code></li> <li>1 = <code>Not Equal</code></li> <li>2 = <code>Greater Than</code></li> <li>3 = <code>Less Than</code></li> <li>4 = <code>Greater Than or Equal</code></li> <li>5 = <code>Less Than or Equal</code></li> <li>6 = <code>Bitwise And</code></li> <li>7 = <code>Bitwise Nand</code></li> </ul> </li> </ul> </li> <li><code>POS</code> - Value Position<ul> <li>Bit 0 to 3 = Starting Byte</li> <li>Bit 4 to 7 = Number of bytes (1 or 2)</li> </ul> </li> <li><code>ARG</code> - Argument (2 bytes)</li> <li><code>TIM</code> - Timeout Time (ms / 100)</li> </ul>"},{"location":"firmware/can/#can-input-id","title":"CAN Input ID","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 36 NUM Set 8 36 NUM SID SID EID EID EID EID Response 8 164 NUM SID SID EID EID EID EID <ul> <li><code>NUM</code> - Input number</li> <li><code>SID</code> - Standard CAN ID<ul> <li>11 bit</li> <li>3 bits of Byte 2 (0x07)</li> </ul> </li> <li><code>EID</code> - Extended CAN ID<ul> <li>29 bit</li> <li>6 bits of Byte 4 (0x1F)</li> </ul> </li> </ul>"},{"location":"firmware/can/#counter","title":"Counter","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 40 NUM Set 8 40 NUM ENA ICI DCI RSI CNT EDG Response 8 168 NUM ENA ICI DCI RSI CNT EDG <ul> <li><code>NUM</code> - Counter number</li> <li><code>ENA</code> - Counter enable/disable<ul> <li>Bit 0</li> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> <li>Bit 1 = Value Wraparound</li> </ul> </li> <li><code>ICI</code> - Increment input (see Variable Map)</li> <li><code>DCI</code> - Decrement input (see Variable Map)</li> <li><code>RSI</code> - Reset input (see Variable Map)</li> <li><code>CNT</code> - Count min/max<ul> <li>Bits 0 to 3 = Minimum value</li> <li>Bits 4 to 7 = Maximum value</li> </ul> </li> <li><code>EDG</code> - Edge type<ul> <li>Bits 0 to 1 = Increment edge type</li> <li>Bits 2 to 3 = Decrement edge type</li> <li>Bits 4 to 5 = Reset edge type</li> <li>0 = <code>Rising</code></li> <li>1 = <code>Falling</code></li> <li>2 = <code>Both</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#condition","title":"Condition","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 45 NUM Set 6 45 NUM OPE IN ARG ARG Response 6 173 NUM OPE IN ARG ARG <ul> <li><code>NUM</code> - Condition number</li> <li><code>OPE</code><ul> <li>Bit 0 = Condition enable/disable</li> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> <li>Bits 4 to 7 = Operator</li> <li>0 = <code>Equal</code></li> <li>1 = <code>Not Equal</code></li> <li>2 = <code>Greater Than</code></li> <li>3 = <code>Less Than</code></li> <li>4 = <code>Greater Than or Equal</code></li> <li>5 = <code>Less Than or Equal</code></li> <li>6 = <code>Bitwise And</code></li> <li>7 = <code>Bitwise Nand</code></li> </ul> </li> <li><code>IN</code> - Condition input (see Variable Map)</li> <li><code>ARG</code> - Argument</li> </ul>"},{"location":"firmware/can/#keypad","title":"Keypad","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 50 NUM Set 6 50 NUM ENA NID TIM MOD Response 6 178 NUM ENA NID TIM MOD <ul> <li><code>NUM</code> - Keypad number</li> <li><code>ENA</code><ul> <li>Bit 0 = Keypad enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> </ul> </li> <li><code>NID</code> <ul> <li>Bits 0 to 6 = Keypad CANopen Node ID<ul> <li>1 to 127</li> </ul> </li> <li>Bit 7 = Timeout enable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> </ul> </li> <li><code>TIM</code> - Timeout Time (ms / 100)</li> <li><code>MOD</code> - Keypad model<ul> <li>0 = <code>BLINK_2_KEY</code> </li> <li>1 = <code>BLINK_4_KEY</code></li> <li>2 = <code>BLINK_5_KEY</code></li> <li>3 = <code>BLINK_6_KEY</code></li> <li>4 = <code>BLINK_8_KEY</code></li> <li>5 = <code>BLINK_10_KEY</code></li> <li>6 = <code>BLINK_12_KEY</code></li> <li>7 = <code>BLINK_15_KEY</code></li> <li>8 = <code>BLINK_13_KEY_2_DIAL</code></li> <li>9 = <code>BLINK_RACEPAD</code></li> <li>10 = <code>GRAYHILL_6_KEY</code></li> <li>11 = <code>GRAYHILL_8_KEY</code></li> <li>12 = <code>GRAYHILL_15_KEY</code></li> <li>13 = <code>GRAYHILL_20_KEY</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#keypad-leds","title":"Keypad LEDs","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 51 NUM Set 8 51 NUM BLB BLC DLB DIM BTB DBB Response 8 179 NUM BLB BLC DLB DIM BTB DBB <ul> <li><code>NUM</code> - Keypad number</li> <li><code>BLB</code> - Backlight brightness - 0 (min) to 255 (100%)</li> <li><code>BLC</code> - Backlight color<ul> <li>0 = <code>Off</code></li> <li>1 = <code>Red</code></li> <li>2 = <code>Green</code></li> <li>3 = <code>Blue</code></li> <li>4 = <code>Yellow</code></li> <li>5 = <code>Cyan</code></li> <li>6 = <code>Violet</code></li> <li>7 = <code>White</code></li> <li>8 = <code>Amber</code></li> <li>9 = <code>Yellow Green</code></li> </ul> </li> <li><code>DLB</code> - Dim backlight brightness - 0 (min) to 255 (100%)</li> <li><code>DIM</code> - Dimming input (see Variable Map)</li> <li><code>BTB</code> - Button brightness (all buttons) - 0 (min) to 255 (100%)</li> <li><code>DBB</code> - Dim button brightness - 0 (min) to 255 (100%)</li> </ul>"},{"location":"firmware/can/#keypad-buttons","title":"Keypad Buttons","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 52 NUM Set 8 52 NUM ENA VV0 VV1 VV2 VV3 FVV Response 8 180 NUM ENA VV0 VV1 VV2 VV3 FVV <ul> <li><code>NUM</code><ul> <li>Bits 0 to 2 = Keypad number</li> <li>Bits 3 to 7 = Button number</li> </ul> </li> <li><code>ENA</code><ul> <li>Bit 0 = Button enabled<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 2 = Mode<ul> <li>0 = <code>Momentary</code></li> <li>1 = <code>Latching</code></li> </ul> </li> <li>Bit 3 to Bit 6 = Val Flashing<ul> <li>0 = <code>Solid</code></li> <li>1 = <code>Flashing</code></li> </ul> </li> <li>Bit 7 = Fault Flashing<ul> <li>0 = <code>Solid</code></li> <li>1 = <code>Flashing</code></li> </ul> </li> </ul> </li> <li><code>VV0</code> to <code>VV3</code> - Val var 0 to 3 (see Variable Map)</li> <li><code>FVV</code> - Fault val var (see Variable Map)</li> </ul>"},{"location":"firmware/can/#keypad-button-leds","title":"Keypad Button LEDs","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 53 NUM Set 8 53 NUM C01 C23 FVC B01 B23 FBC Response 8 181 NUM C01 C23 FVC B01 B23 FBC <ul> <li><code>NUM</code><ul> <li>Bits 0 to 2 = Keypad number</li> <li>Bits 3 to 7 = Button number</li> </ul> </li> <li><code>C01</code><ul> <li>Bits 0 to 4 = Value 0 color</li> <li>Bits 5 to 7 = Value 1 color<ul> <li>0 = <code>Off</code></li> <li>1 = <code>Red</code></li> <li>2 = <code>Green</code></li> <li>3 = <code>Orange</code></li> <li>4 = <code>Blue</code></li> <li>5 = <code>Violet</code></li> <li>6 = <code>Cyan</code></li> <li>7 = <code>White</code></li> </ul> </li> </ul> </li> <li><code>C23</code><ul> <li>Bits 0 to 4 = Value 2 color</li> <li>Bits 5 to 7 = Value 3 color</li> </ul> </li> <li><code>FVC</code><ul> <li>Bits 0 to 4 = Fault value color</li> <li>Bits 5 to 7 = Num of color values (2 to 4)</li> </ul> </li> <li><code>B01</code><ul> <li>Bits 0 to 4 = Blinking value 0 color</li> <li>Bits 5 to 7 = Blinking value 1 color</li> </ul> </li> <li><code>B23</code><ul> <li>Bits 0 to 4 = Blinking value 2 color</li> <li>Bits 5 to 7 = Blinking value 3 color</li> </ul> </li> <li><code>FBC</code><ul> <li>Bits 0 to 4 = Blinking fault value color</li> </ul> </li> </ul>"},{"location":"firmware/can/#keypad-dials","title":"Keypad Dials","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 54 NUM Set 5 54 NUM DMI DMA DOF Response 5 182 NUM DMI DMA DOF <ul> <li><code>NUM</code><ul> <li>Bits 0 to 2 = Keypad number</li> <li>Bits 3 to 7 = Dial number</li> </ul> </li> <li><code>DMI</code> = Dial min LED</li> <li><code>DMA</code> = Dial max LED</li> <li><code>DOF</code> = Dial LED offset</li> </ul>"},{"location":"firmware/can/#special","title":"Special","text":"<p>There are some special messages that are used for special functions. </p>"},{"location":"firmware/can/#version","title":"Version","text":"<p>This message gets the firmware version</p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 120 Response 5 248 MA MI BH BL <ul> <li><code>MA</code> - Major</li> <li><code>MI</code> - Minor</li> <li><code>BH</code> - Build High Byte</li> <li><code>BL</code> - Build Low Byte</li> <li></li> </ul>"},{"location":"firmware/can/#sleep","title":"Sleep","text":"<p>The sleep message triggers the PDM to immediately go to sleep. </p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 4 121 U I T Response 2 249 OK <p>Note</p> <p>This message will not have an effect if the sleep conditions are not met, see Sleep</p>"},{"location":"firmware/can/#bootloader","title":"Bootloader","text":"<p>This message jumps to the bootloader for firmware updating | Type   | DLC | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 | Byte 5 | Byte 6 | Byte 7| |:------:|:---:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:-----:| |Get     | 4   | 125    |        |        |        |        |        |        |       | |Response| 2   | 253    | OK     |        |        |        |        |        |       |</p>"},{"location":"firmware/can/#burn","title":"Burn","text":"<p>The burn message triggers the PDM to save the configuration to FRAM memory. </p> <p>Without this message, any settings change will be lost on a power cycle</p> <p>A response will be sent with the result of the Burn</p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 4 127 1 3 8 Response 2 255 OK <p>Tip</p> <p>This is an easy way to test new settings. Try new settings without Burn and then cycle power to restore the old settings</p>"},{"location":"firmware/can/#wake-up","title":"Wake Up","text":"<p>This message triggers the PDM to wake up from sleep.</p> <p>There is no response to this message.</p> <p>Tip</p> <p>The format of this message is not critical, any CAN message will wake the PDM</p>"},{"location":"firmware/can/#messages","title":"Messages","text":"<p>Periodically, the device will send info, warning or error messages to facilitate debugging. </p> <p>These messages will have the format below. </p> <p>The first byte is a message type, the second is the ID number and 3rd-5th are extra integer parameters that are added to some messages. </p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Info 5 F SRC N1 N2 N3 Warning 5 R SRC N1 N2 N3 Error 5 E SRC N1 N2 N3 <ul> <li><code>SRC</code> - Source, see table below</li> <li><code>N1</code> - Integer parameter</li> <li><code>N2</code> - Integer parameter</li> <li><code>N3</code> - Integer parameter</li> </ul>"},{"location":"firmware/can/#errors","title":"Errors","text":"<p>Errors messages are sent when a non-recoverable issue occurs.</p> <p>The only way to reset is to cycle power on the device. </p> <p><code>N1</code> will contain the error number. </p>"},{"location":"firmware/can/#source","title":"Source","text":"SRC Num Description Parameter 1 Parameter 2 Parameter 3 Description 1 State Power On Device is in it's initial state 2 State Starting Initializing peripherals 3 State Run Normal operating state 4 State Over Temp Temp (C*10) Board temp &gt; Max, outputs off 5 State Error Fatal error, power cycle 6 State Sleep Low power sleep, no activity 7 State Wake Wake from low power sleep 8 Overcurrent Output Num Current (A*10) Overcurrent on output 9 Battery Voltage Volts (V*10) Battery voltage under/over 10 CAN CAN warning or error 11 USB USB warning or error 12 Over Temperature Temp (C*10) Board temp warning or error 13 Configuration Device config init error 14 FRAM FRAM init error 15 ADC ADC DMA init error 16 I2C I2C init error 17 Temperature Sensor Temperature sensor init error 18 USB Connected USB cable connection detected 19 Init Error during initialization"},{"location":"firmware/code-style/","title":"Code style","text":""},{"location":"firmware/configuration/","title":"Configuration","text":""},{"location":"firmware/configuration/#introduction","title":"Introduction","text":"<p>To enable changes to the dingoPDM configuration and to persist those changes across a power cycle dingoPDM uses a configuration struct that is read from and written to FRAM over I2C. </p>"},{"location":"firmware/configuration/#read","title":"Read","text":"<p>When dingoPDM is powered on, the first thing it does after initializing ChibiOS and I2C is read the configuration from FRAM over I2C. </p> <p>Read sequence:</p> <ol> <li>Check the FRAM I2C communication and chip IDs (manufacturer and product ID)</li> <li>Read the configuration starting at address 0</li> <li>Check the version number stored in the configuration matches the current configuration</li> <li>Read the configuration checksum stored at the memory address immediatley following the end of the configuration</li> <li>Calculate the configuration checksum for the current configuration read from FRAM</li> <li>Verify that the checksum stored in FRAM matches the one calculated from the configuration stored in FRAM</li> <li>Continue intialization</li> </ol>"},{"location":"firmware/configuration/#updating","title":"Updating","text":"<p>The values of the dingoPDM configuration are updated using CAN or USB messages. </p> <p>The format of these messages can be found in CAN</p> <p>There is no special mode required to update configuration values, update settings messages can be sent at any time (besides a fatal error state). </p> <p>Note</p> <p>When a value is updated using a CAN or USB the value is immediately changed in the dingoPDM firmware</p> <p>But, the value will not persist over a power cycle</p> <p>To keep the updated value send a Burn message to write the new configuration to FRAM</p>"},{"location":"firmware/configuration/#write","title":"Write","text":"<p>To reduce the number of writes to FRAM the configuration is not written to FRAM on configuration changes. </p> <p>The updated value is immediately changed in the dingoPDM firmware but a Burn message must be received to write the new configuration to FRAM</p> <p>The Burn message is the only way to trigger a write of the current configuration. </p> <p>Write sequence:</p> <ol> <li>Check the FRAM I2C communication and chip IDs (manufacturer and product ID)</li> <li>Write the configuration starting at address 0</li> <li>Calculate the checksum of the current configuration</li> <li>Write the checksum to the memory address immediatley following the end of the configuration</li> <li>Send the write result out on the Burn response message (0 = fail, 1 = success)</li> </ol>"},{"location":"firmware/configuration/#read-failure","title":"Read Failure","text":"<p>If checking I2C communication and chip IDs fails dingoPDM enters the fatal error state and will not go into run.</p> <p>If any of the other read steps fail:</p> <ul> <li>Check for I2C errors<ul> <li>Errors = true, go to the fatal error state</li> </ul> </li> <li>Write the firmware default configuration to FRAM<ul> <li>If this fails, check for I2C errors again:<ul> <li>Errors = true, go to the fatal error state</li> </ul> </li> <li>If this succeeds, go to the fatal error state</li> </ul> </li> </ul> <p>Info</p> <p>Writing the firmware default configuration on a failure allows dingoPDM to recover from a firmware configuration change. </p> <p>Some firmware updates include a change to the configuration struct which means the configuration stored in FRAM no longer matches what the firmware expects.</p> <p>On the next power cycle, FRAM will contain the correct memory values and will pass the version and CRC checks but the configuration will be the default blank configuration.</p> <p>Write the new desired configuration with the updated format to the dingoPDM using DingoConfigurator.</p>"},{"location":"firmware/design/","title":"Design","text":""},{"location":"firmware/design/#design","title":"Design","text":""},{"location":"firmware/design/#device-state","title":"Device State","text":"<p>dingoPDM uses a simple state machine to control overtemperature, sleep and error behavior. </p> <pre><code>stateDiagram\n    [*] --&gt; Run : Power On\n    Run --&gt; OverTemp : Temp &gt; Max\n    OverTemp --&gt; Run : Temp &lt; Max\n    Run --&gt; Sleep : Timeout\n    Sleep --&gt; Run : Activity\n    Run --&gt; Error : Error\n    OverTemp --&gt; Error : Temp &gt; Critical\n    Error --&gt; [*] : Power Cycle Required</code></pre> <p>See Sleep for information on the sleep timeout and wake</p> <p>See Errors for information on possible fatal errors</p> <p>See LEDs for possible status and error LED states</p> <ul> <li><code>Run</code><ul> <li>Default state</li> </ul> </li> <li><code>Sleep</code><ul> <li>All outputs off</li> <li>Low power state</li> </ul> </li> <li><code>OverTemp</code><ul> <li>Temperature sensor mounted to PCB over max temp</li> <li>Warning message sent</li> <li>Outputs remain on</li> </ul> </li> <li><code>Error</code><ul> <li>Fatal error state, power cycle required to recover</li> </ul> </li> </ul>"},{"location":"firmware/design/#files","title":"Files","text":"<p>dingoPDM firmware files can be divided between ChibiOS, OpenOCD and dingoPDM specific files</p>"},{"location":"firmware/design/#chibios","title":"ChibiOS","text":"<ul> <li>cfg/ <ul> <li>ChibiOS configuration files</li> </ul> </li> <li>ChibiOS/<ul> <li>ChibiOS repository files</li> </ul> </li> <li>boards/./board (.h / .c / .mk)<ul> <li>ChibiOS configuration files</li> <li>Unique between dingoPDM and dingoPDM-Max</li> </ul> </li> </ul>"},{"location":"firmware/design/#openocd","title":"OpenOCD","text":"<ul> <li>interface/<ul> <li>ST Link debug interface</li> </ul> </li> <li>target/<ul> <li>STM32F4 debug configuration</li> </ul> </li> </ul>"},{"location":"firmware/design/#dingopdm","title":"dingoPDM","text":""},{"location":"firmware/design/#folders","title":"Folders","text":"<ul> <li>boards/<ul> <li>dingoPDM and dingoPDM-Max specific config and utils</li> <li>hw_devices<ul> <li></li> </ul> </li> </ul> </li> <li>boards/cortex-m4/<ul> <li>MCU specific utils (stop/bootloader)</li> </ul> </li> <li>devices/ <ul> <li>External devices (future)</li> </ul> </li> <li>hardware/<ul> <li>Onboard hardware devices (FRAM/temperature)</li> </ul> </li> <li>keypad/<ul> <li>CAN keypads</li> </ul> </li> <li>wiper/<ul> <li>Wiper function</li> </ul> </li> </ul>"},{"location":"firmware/design/#declaration","title":"Declaration","text":"File dingopdm_config FW version / delays / limits / etc. enums All enum declarations"},{"location":"firmware/design/#entry-point","title":"Entry Point","text":"File main Init ChibiOS + start PDM"},{"location":"firmware/design/#pdm-main","title":"PDM Main","text":"File pdm Main PDM logic"},{"location":"firmware/design/#hardware","title":"Hardware","text":"File can CAN Tx/Rx - Post/Fetch Mailboxes led Status/Error LEDs usb USB Tx/Rx - Post/Fetch Mailboxes"},{"location":"firmware/design/#configuration","title":"Configuration","text":"File config_handler Process setting change config Read/Write config in FRAM"},{"location":"firmware/design/#functions","title":"Functions","text":"File can_input CAN Rx decoding / logic condition Condition logic counter Counter logic digital Digital input logic flasher Flasher logic input Momentary/latching logic profet Output logic + current measurement pwm Output Pulse Width Modulation logic starter Starter disable logic virtual_input Virtual input logic"},{"location":"firmware/design/#utilities","title":"Utilities","text":"File crc Calculate CRC edge Detect edge - rising/falling error Fatal error - Flash LED mailbox CAN/USB Tx/Rx mailbox buffers msg Status Tx messages"},{"location":"firmware/errors/","title":"Errors","text":""},{"location":"firmware/errors/#error-state","title":"Error State","text":"<p>The device will enter an error state when a non-recoverable issue occurs.</p> <p>A message will be sent over CAN and/or USB and the Error LED will flash the error number. </p> <p>Warning</p> <p>The only way to reset from an error is to cycle power on the device. </p>"},{"location":"firmware/errors/#error-numbers","title":"Error Numbers","text":"Error # Description 1 Watchdog 2 Message Queue 3 Task 4 Configuration 5 FRAM 6 ADC 7 Temperature Sensor 8 USB 9 CAN 10 CRC 11 I2C 12 RCC 13 Temperature 14 PWM"},{"location":"firmware/introduction/","title":"Introduction","text":"<p>Bug</p> <p>Firmware documentation is a work in progress</p> <p>dingoPDM uses ChibiOS RTOS </p> <p></p> <p>dingoPDM and dingoPDM-Max both use the same firmware, with only a variable change during build. </p>"},{"location":"firmware/introduction/#firmware-download","title":"Firmware Download","text":"<p>The latest version can be downloaded here: DingoPDM_FW</p>"},{"location":"firmware/introduction/#firmware-update","title":"Firmware Update","text":"<p>See Updating for firmware updating instructions</p>"},{"location":"firmware/keypad/","title":"Keypad","text":""},{"location":"firmware/keypad/#introduction","title":"Introduction","text":"<p>dingoPDM supports up to 2 CANopen keypads per device as the keypad CANopen master node. </p> <p>As the keypads CANopen master node dingoPDM will:</p> <ul> <li>Send the start transmitting message</li> <li>Set the backlight color</li> <li>Set the button colors or LEDs</li> </ul> <p>Each keypad needs only 1 CANopen master node. </p> <p>Additional keypad CANopen messages can be configured as CAN inputs without needing to be the CANopen master node. </p>"},{"location":"firmware/keypad/#models","title":"Models","text":"<p>Warning</p> <p>Only CANopen keypads are currently supported</p> <ul> <li> : Tested</li> <li> : Supported, Untested</li> <li> : Supported in the future</li> <li> : Unsupported</li> </ul> Brand Model Protocol Status <code>Blink Marine</code> <code>PKP-1600-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2200-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2300-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2400-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2500-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2600-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-3500-SI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-3500-SI-MT</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-1200-LI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-1500-LI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2200-LI</code> <code>CANopen</code> <code>Blink Marine</code> <code>PKP-2400-LI</code> <code>CANopen</code> <p>Note</p> <p>If you've tested one of the  marked models above please let me know</p>"},{"location":"firmware/keypad/#initial-setup","title":"Initial Setup","text":""},{"location":"firmware/keypad/#setting-node-id","title":"Setting Node ID","text":""},{"location":"firmware/keypad/#setting-transmit-rate","title":"Setting Transmit Rate","text":""},{"location":"firmware/keypad/#blink-marine","title":"Blink Marine","text":""},{"location":"firmware/keypad/#backlight","title":"Backlight","text":""},{"location":"firmware/keypad/#button-backlight","title":"Button Backlight","text":""},{"location":"firmware/keypad/#dial","title":"Dial","text":""},{"location":"firmware/keypad/#grayhill","title":"Grayhill","text":""},{"location":"firmware/keypad/#button-leds","title":"Button LEDs","text":""},{"location":"firmware/leds/","title":"LEDs","text":""},{"location":"firmware/leds/#v-power","title":"<code>V</code> - Power","text":"<p>The Power LED, <code>V</code> on the case, indicates that the 3.3V power is on. </p> <p>Tip</p> <p>To reduce power consumption, this LED can be disabled by cutting a jumper on the PCB.</p> <p>To restore the LED, the jumper can be bridged with solder. </p>"},{"location":"firmware/leds/#s-status","title":"<code>S</code> - Status","text":"<p>The Status LED, 'S' on the case, is used to indicate the status of the device. </p>"},{"location":"firmware/leds/#e-error","title":"<code>E</code> - Error","text":"<p>The Error LED, 'E' on the case, is used to indicate an error on the device. </p> <p>See Error State for more information. </p>"},{"location":"firmware/leds/#states","title":"States","text":"<ul> <li> : LED Off</li> <li> or  : LED On</li> <li>  or   : LED Blinking</li> <li>  : LED Blinking Code</li> </ul> V S E State Description Power off or power not ok. Check power input <code>Sleep</code> Device sleep <code>Run</code> Device operating properly <code>Run</code> Output overcurrent detected <code>Run</code> Output overcurrent count limit reached <code>Overtemp</code> Device overtemp reached (State=<code>Overtemp</code>) <code>Error</code> Blink error number, see Error State"},{"location":"firmware/sleep/","title":"Sleep","text":"<p>Sleep state will be be entered when these conditions are met:</p> <ul> <li>No USB connected</li> <li>No CAN traffic for 30 seconds</li> <li>No outputs on for 30 seconds</li> </ul> <p>Sleep state can be exited by one of these Wake inputs:</p> <ul> <li>Any CAN traffic</li> <li>Digital Input changing state</li> <li>USB cable connected</li> </ul> <p>Tip</p> <p>To further reduce power consumption, the power LED can be disabled by cutting the solder bridge near the LED</p> <p>v7.2 Hardware</p> <p>v7.2 hardware does not have the power LED solder bridge or CAN disable pin connected.</p> <p>To further reduce consumption, the LED or resistor must be de-soldered. </p> <p>A jumper wire can be added between E3 test pad and the CAN transceiver pin 8 (Rs)</p> <p>Test results</p> <ul> <li> : Enabled</li> <li> : Disabled</li> <li> : Requires modification</li> </ul> State LED CAN Transceiver Current (@12V) v7.2 HW Run (no outputs) 40-50mA Run (no outputs) 35-45mA Sleep 17mA Sleep 13mA Sleep 8mA Sleep 6mA"},{"location":"firmware/updating/","title":"Updating","text":"<p>dingoPDM firmware can be updated using the onboard USB-C connection. </p>"},{"location":"firmware/updating/#stm32cubeprogrammer","title":"STM32CubeProgrammer","text":"<p>To update the firmware, the STMicroelectronics STM32CubeProgrammer is used. </p> <p>This software can be downloaded here: STM32CubeProgrammer</p>"},{"location":"firmware/updating/#entering-bootloader","title":"Entering Bootloader","text":"<p>To update the firmware, the device must be put into the bootloader. </p> <p>This can be done using one of these methods:</p> <ul> <li>Remove the case and move the boot switch to the bootloader position</li> <li>Use DingoConfigurator FwUpdate button to jump the device to the bootloader</li> </ul>"},{"location":"firmware/updating/#boot-switch","title":"Boot Switch","text":"<p>To update the firmware, the device must be put into bootloader</p> <p>One option is using the <code>boot</code> switch on the PCB. </p> <p>Note</p> <p>The case must be removed to access the boot switch.</p> <ul> <li>Remove the DT connector and any wires going to the power/ground connections</li> <li>Remove the 2x Philips screws next to the DT connector</li> <li>Remove the 4x M6 screws around the perimeter of the device</li> <li>Slide/wiggle the case up and off the device</li> </ul> <p>To enter the bootloader, move the slide switch to the position that aligns it with the lines on the switch body</p> <p> </p> <p>Warning</p> <p>After updating, remember to set the boot switch back to the original position</p>"},{"location":"firmware/updating/#fwupdate","title":"FwUpdate","text":"<p>After connecting to the dingoPDM using dingoConfigurator, the <code>FwUpdate</code> button on the toolbar to send the <code>~BOOTL</code> message to put the device into the bootloader.</p> <p>Warning</p> <p>Pressing the <code>FwUpdate</code> button will stop the PDM and drop communication to DingoConfigurator</p>"},{"location":"firmware/updating/#connection","title":"Connection","text":"<p>Connect a USB-C to USB-A cable to the PC. </p> <p>Note</p> <p>V7.2 PCBs do not support USB-C to USB-C cables, a USB-C to USB-A cable must be used</p> <p>Note</p> <p>12V power is not required to perform the firmware update, the device will be powered by the USB cable</p> <p>To verify that the device has entered the bootloader:</p> <ul> <li>Open the Windows <code>Device Manager</code></li> <li>Expand <code>Universal Serial Bus devices</code></li> <li>The <code>STM32 BOOTLOADER</code> should be listed</li> <li></li> </ul>"},{"location":"firmware/updating/#applying-update","title":"Applying Update","text":"<ul> <li>Install <code>STM32CubeProgrammer</code></li> <li>Open <code>STM32CubeProgrammer</code></li> <li>Change connection type to <code>USB</code></li> <li> <p>Press the refresh button to update the port</p> </li> <li> <p></p> </li> <li> <p>Press the <code>Connect</code> button, after successful connection the <code>Target Information</code> should be updated</p> </li> <li></li> <li>Select the second icon on the left, <code>Erasing &amp; Programming</code></li> <li></li> <li>Press <code>Browse</code> and select the new firmware .hex file</li> <li>Verify <code>Skip flash erase before programming</code> is unchecked</li> <li>Verify <code>Verify programming</code> and <code>Run after programming</code> are checked</li> <li>Press <code>Start Programming</code></li> <li>After successful programming, the device will disconnect</li> <li>You should also receive pop-ups verifying successful programming</li> <li></li> </ul>"},{"location":"firmware/updating/#success","title":"Success","text":"<p>Congrats! You successfuly updated the dingoPDM firmware. </p> <p>The firmware version can be verified using DingoConfigurator</p> <p>Warning</p> <p>Don't forget to set the boot switch back to the original position!</p> <p>Danger</p> <p>A POWER CYCLE IS REQUIRED any time the boot switch is changed</p>"},{"location":"firmware/variablemap/","title":"Variable Mapping","text":"<p>To enable software configuration a Variable Map is maintained on the device.</p> <p>Each variable of the variable map corresponds to the result of another item.</p> <p>These are used to:</p> <ul> <li>Control the output on/off</li> <li>Create logic with the Virtual Inputs</li> <li>Control wipers</li> <li>Turn flashers on/off</li> <li>Engage the starter disable</li> </ul> <p>Warning</p> <p>The Variable Map is subject to change as new functions/features are added.</p> Index Variable 0 None 1 Digital In 1 2 Digital In 2 3 CAN In 1 4 CAN In 2 5 CAN In 3 6 CAN In 4 7 CAN In 5 8 CAN In 6 9 CAN In 7 10 CAN In 8 11 CAN In 9 12 CAN In 10 13 CAN In 11 14 CAN In 12 15 CAN In 13 16 CAN In 14 17 CAN In 15 18 CAN In 16 19 CAN In 17 20 CAN In 18 21 CAN In 19 22 CAN In 20 23 CAN In 21 24 CAN In 22 25 CAN In 23 26 CAN In 24 27 CAN In 25 28 CAN In 26 29 CAN In 27 30 CAN In 28 31 CAN In 29 32 CAN In 30 33 CAN In 31 34 CAN In 32 35 CAN In Val 1 36 CAN In Val 2 37 CAN In Val 3 38 CAN In Val 4 39 CAN In Val 5 40 CAN In Val 6 41 CAN In Val 7 42 CAN In Val 8 43 CAN In Val 9 44 CAN In Val 10 45 CAN In Val 11 46 CAN In Val 12 47 CAN In Val 13 48 CAN In Val 14 49 CAN In Val 15 50 CAN In Val 16 51 CAN In Val 17 52 CAN In Val 18 53 CAN In Val 19 54 CAN In Val 20 55 CAN In Val 21 56 CAN In Val 22 57 CAN In Val 23 58 CAN In Val 24 59 CAN In Val 25 60 CAN In Val 26 61 CAN In Val 27 62 CAN In Val 28 63 CAN In Val 29 64 CAN In Val 30 65 CAN In Val 31 66 CAN In Val 32 67 Virtual In 1 68 Virtual In 2 69 Virtual In 3 70 Virtual In 4 71 Virtual In 5 72 Virtual In 6 73 Virtual In 7 74 Virtual In 8 75 Virtual In 9 76 Virtual In 10 77 Virtual In 11 78 Virtual In 12 79 Virtual In 13 80 Virtual In 14 81 Virtual In 15 82 Virtual In 16 83 Output 1 On 84 Output 1 OC 85 Output 1 Fault 86 Output 2 On 87 Output 2 OC 88 Output 2 Fault 89 Output 3 On 90 Output 3 OC 91 Output 3 Fault 92 Output 4 On 93 Output 4 OC 94 Output 4 Fault 95 Output 5 On 96 Output 5 OC 97 Output 5 Fault 98 Output 6 On 99 Output 6 OC 100 Output 6 Fault 101 Output 7 On 102 Output 7 OC 103 Output 7 Fault 104 Output 8 On 105 Output 8 OC 106 Output 8 Fault 107 Wiper Slow 108 Wiper Fast 109 Wiper Park 110 Wiper Inter 111 Wiper Wash 112 Wiper Swipe 113 Flasher 1 114 Flasher 2 115 Flasher 3 116 Flasher 4 117 Counter Val 1 118 Counter Val 2 119 Counter Val 3 120 Counter Val 4 121 Condition 1 122 Condition 2 123 Condition 3 124 Condition 4 125 Condition 5 126 Condition 6 127 Condition 7 128 Condition 8 129 Condition 9 130 Condition 10 131 Condition 11 132 Condition 12 133 Condition 13 134 Condition 14 135 Condition 15 136 Condition 16 137 Condition 17 138 Condition 18 139 Condition 19 140 Condition 20 141 Condition 21 142 Condition 22 143 Condition 23 144 Condition 24 145 Condition 25 146 Condition 26 147 Condition 27 148 Condition 28 149 Condition 29 150 Condition 30 151 Condition 31 152 Condition 32 153 Keypad 1 Btn 1 154 Keypad 1 Btn 2 155 Keypad 1 Btn 3 156 Keypad 1 Btn 4 157 Keypad 1 Btn 5 158 Keypad 1 Btn 6 159 Keypad 1 Btn 7 160 Keypad 1 Btn 8 161 Keypad 1 Btn 9 162 Keypad 1 Btn 10 163 Keypad 1 Btn 11 164 Keypad 1 Btn 12 165 Keypad 1 Btn 13 166 Keypad 1 Btn 14 167 Keypad 1 Btn 15 168 Keypad 1 Btn 16 169 Keypad 1 Btn 17 170 Keypad 1 Btn 18 171 Keypad 1 Btn 19 172 Keypad 1 Btn 20 173 Keypad 2 Btn 1 174 Keypad 2 Btn 2 175 Keypad 2 Btn 3 176 Keypad 2 Btn 4 177 Keypad 2 Btn 5 178 Keypad 2 Btn 6 179 Keypad 2 Btn 7 180 Keypad 2 Btn 8 181 Keypad 2 Btn 9 182 Keypad 2 Btn 10 183 Keypad 2 Btn 11 184 Keypad 2 Btn 12 185 Keypad 2 Btn 13 186 Keypad 2 Btn 14 187 Keypad 2 Btn 15 188 Keypad 2 Btn 16 189 Keypad 2 Btn 17 190 Keypad 2 Btn 18 191 Keypad 2 Btn 19 192 Keypad 2 Btn 20 193 Keypad 1 Dial 1 194 Keypad 1 Dial 2 195 Keypad 1 Dial 3 196 Keypad 1 Dial 4 197 Keypad 2 Dial 1 198 Keypad 2 Dial 2 199 Keypad 2 Dial 3 200 Keypad 2 Dial 4 201 Always On"},{"location":"firmware/wipers/","title":"Wipers","text":""},{"location":"firmware/wipers/#functionality","title":"Functionality","text":"<p>dingoPDM includes the ability to control a simple DC wiper motor. </p>"},{"location":"firmware/wipers/#wiring","title":"Wiring","text":"<p>To wire the wiper motor to the dingoPDM, a WiperModule or similar relay setup is required. </p> <p>The relays are used to correctly isolate the slow and fast motor windings. </p> <p>See Wiper Connections for more information. </p>"},{"location":"firmware/wipers/#outputs","title":"Outputs","text":"<p>To control the wiper motor, dingoPDM uses 2 outputs. </p> <p>These outputs are available in the var map and can be set to any outputs. </p> <ul> <li>Slow output</li> <li>Fast output</li> </ul>"},{"location":"firmware/wipers/#inputs","title":"Inputs","text":""},{"location":"firmware/wipers/#park-switch","title":"Park Switch","text":"<p>To correctly control the wiper motor, dingoPDM requires 1 input to be wired to the park switch of the wiper motor. </p> <p>The parked position logic level can be changed using the <code>Park Stop Level</code> setting.</p>"},{"location":"firmware/wipers/#slow-in","title":"Slow In","text":"<ul> <li>Slow input = true<ul> <li>Wiper motor runs at slow speed</li> </ul> </li> <li>Slow input = false<ul> <li>Motor moves to the park position. </li> </ul> </li> </ul>"},{"location":"firmware/wipers/#fast-in","title":"Fast In","text":"<ul> <li>Fast input = true<ul> <li>Wiper motor runs at fast speed</li> </ul> </li> <li>Fast input = false<ul> <li>Motor moves to the park position. </li> </ul> </li> </ul>"},{"location":"firmware/wipers/#intermittent-in","title":"Intermittent In","text":"<p>When the intermittent input is true, the wiper motor runs at slow speed and pauses at the end of every cycle. After the pause is elapsed, the motor does another cycle and repeats. </p> <p>The intermittent time can be set as a fixed value or a variable value depending on the mode. </p>"},{"location":"firmware/wipers/#wash-in","title":"Wash In","text":"<p>On the rising edge of the wash input the wiper motor runs at slow speed (unless previously running at fast speed). </p> <p>When the input goes false, the wiper motor continues to run for the number of cycles set in Wash/Wipe cycles.</p> <p>After completing the cycles the wiper motor parks.</p> <p>Tip</p> <p>To control a washer pump motor, use the <code>Wash In</code> variable as the output variable for a dingoPDM output wired to the pump motor</p>"},{"location":"firmware/wipers/#swipe-in","title":"Swipe In","text":"<p>On the rising edge of the swipe input the wiper motor runs at fast speed for one cycle and then parks. </p>"},{"location":"firmware/wipers/#speed-in","title":"Speed In","text":"<p>When in the <code>IntIn</code> or <code>MixIn</code> mode this numeric input is used to set the speed from the speed map. </p>"},{"location":"firmware/wipers/#on-in","title":"On in","text":"<p>When in <code>MixIn</code> mode the on input controls whether the motor is running or not. </p>"},{"location":"firmware/wipers/#modes","title":"Modes","text":"<p>A dingoPDM wiper can be controlled using a few different modes. </p> <ul> <li><code>DigIn</code></li> <li><code>IntIn</code></li> <li><code>MixIn</code></li> </ul>"},{"location":"firmware/wipers/#digin","title":"DigIn","text":"<p>In <code>DigIn</code> mode the wiper motor is controlled with simple digital inputs. </p> <p>Intermittent pause delay is set the value in <code>Intermit 1</code> and is not variable. </p> <p>Required inputs:</p> <ul> <li><code>Park In</code></li> <li><code>Slow In</code></li> </ul> <p>Optional inputs:</p> <ul> <li><code>Fast In</code></li> <li><code>Inter In</code></li> <li><code>Swipe In</code></li> <li><code>Wash In</code></li> </ul> <p>Unused inputs:</p> <ul> <li><code>On In</code></li> <li><code>Speed In</code></li> </ul>"},{"location":"firmware/wipers/#intin","title":"IntIn","text":"<p>In <code>IntIn</code> mode the wiper motor is controlled using a numeric input value.</p> <p>This could be a CAN input value or a Counter value. </p> <p>The value of the numeric input is mapped to the values set in <code>Wiper Speed Map</code></p> <p>Example</p> <ul> <li><code>Speed 0</code> = <code>Park</code></li> <li><code>Speed 1</code> = <code>Slow</code></li> <li><code>Speed 2</code> = <code>Fast</code></li> <li><code>Speed 3</code> = <code>Inter1</code></li> <li><code>Speed 4</code> = <code>Inter2</code></li> <li><code>Speed 5</code> = <code>Inter3</code></li> <li><code>Speed 6</code> = <code>Inter4</code></li> <li><code>Speed 7</code> = <code>Inter5</code></li> </ul> <p><code>Speed In</code> value sets motor to:</p> <ul> <li><code>Speed In</code> = 2<ul> <li><code>Fast</code></li> </ul> </li> <li><code>Speed In</code> = 5<ul> <li><code>Intermittent</code> with a delay of <code>Intermit 3</code></li> </ul> </li> </ul> <p>The numeric input value can be any value between 0 and 7, all values do not have to be provided.</p> <p>Note: One value must always be <code>Park</code> or the motor will never stop</p> <p>Required inputs:</p> <ul> <li><code>Park In</code></li> <li><code>Speed In</code></li> </ul> <p>Optional inputs:</p> <ul> <li><code>Swipe In</code></li> <li><code>Wash In</code></li> </ul> <p>Unused inputs:</p> <ul> <li><code>Slow In</code></li> <li><code>Fast In</code></li> <li><code>Inter In</code></li> <li><code>On In</code></li> </ul>"},{"location":"firmware/wipers/#mixin","title":"MixIn","text":"<p><code>MixIn</code> mode is similar to <code>IntIn</code> mode but with the addition of <code>On In</code>. </p> <p>The speed map works the same as <code>IntIn</code> mode but <code>Park</code> is not required as a possible speed. </p> <p>The wiper motor uses the <code>On In</code> to control whether the motor is running:</p> <ul> <li><code>On In</code> = On<ul> <li>Motor running</li> </ul> </li> <li><code>On In</code> = Off<ul> <li>Motor parking/parked</li> </ul> </li> </ul> <p>Required inputs:</p> <ul> <li><code>Park In</code></li> <li><code>Speed In</code></li> <li><code>On In</code></li> </ul> <p>Optional inputs:</p> <ul> <li><code>Swipe In</code></li> <li><code>Wash In</code></li> </ul> <p>Unused inputs:</p> <ul> <li><code>Slow In</code></li> <li><code>Fast In</code></li> <li><code>Inter In</code></li> </ul>"},{"location":"firmware/wipers/#states","title":"States","text":"<p>dingoPDM wipers can be in one of these states:</p> <ul> <li><code>Parked</code><ul> <li>At the park position</li> <li>Waiting for inputs to change state</li> <li>Slow = off</li> <li>Fast = off</li> </ul> </li> <li><code>Parking</code><ul> <li>Inputs off, moving to the park position</li> <li>Outputs = previous state (slow or fast)</li> </ul> </li> <li><code>Slow</code><ul> <li>Slow input on</li> <li>Slow = on</li> <li>Fast = off</li> </ul> </li> <li><code>Fast</code><ul> <li>Fast input on</li> <li>Slow = off</li> <li>Fast = on</li> </ul> </li> <li><code>IntermittentPause</code><ul> <li>Intermittent input on</li> <li>At the park position</li> <li>Waiting for intermittent delay to expire</li> <li>Slow = off</li> <li>Fast = off</li> </ul> </li> <li><code>IntermittentOn</code><ul> <li>Intermittent input on</li> <li>Motor moving at slow speed</li> <li>Slow = on</li> <li>Fast = off</li> </ul> </li> <li><code>Wash</code><ul> <li>Wash input on or (off and wipes not complete)</li> <li>Outputs = previous state (slow or fast)</li> </ul> </li> <li><code>Swipe</code><ul> <li>Swipe input on</li> <li>Motor moving at fast speed</li> <li>Slow = off</li> <li>Fast = on</li> </ul> </li> </ul>"},{"location":"gettingstarted/introduction/","title":"Introduction","text":""},{"location":"gettingstarted/introduction/#what-is-it","title":"What Is It?","text":"<p>dingoPDM is an automotive <code>Power Distribution Module</code>. </p> <p>PDMs can be used in place of fuses, circuit breakers and relays, including flasher and wiper relays. </p> <p>Each output channel of the PDM:</p> <ul> <li>Measures the active current and reacts by turning the output off if the current exceeds the limit</li> <li>Automatically resets after a cool down period a maximum number of times</li> <li>Can be turned on/off using various input sources</li> <li>Can be on constantly or with Pulse Width Modulation(PWM)</li> </ul> <p>This makes PDMs a very flexible solution when designing the power system in any automotive application. </p>"},{"location":"gettingstarted/introduction/#features","title":"Features","text":"<p>A key feature of any PDM is flexible configuration to match the target application. </p> <p>To meet these needs, dingoPDM includes configurable:</p> <ul> <li>Outputs</li> <li>Digital inputs</li> <li>CAN inputs</li> <li>Virtual logic inputs</li> <li>Counters</li> <li>Logic conditions</li> <li>Wipers</li> <li>Flashers</li> <li>Starter disable</li> </ul> <p>All settings on the dingoPDM can be controller by the custom Windows application DingoConfigurator </p> <p>dingoPDM also includes:</p> <ul> <li>Cyclic CAN status messages (TX)</li> <li>Pulse Width Modulation (PWM)<ul> <li>Configurable base frequency</li> <li>Fixed or variable duty cycle</li> </ul> </li> <li>CAN keypad support (work in progress)<ul> <li>Blink Marine</li> <li>Grayhill</li> </ul> </li> <li>Battery voltage measurement</li> <li>Internal temperature sensor</li> <li>Status LEDs</li> </ul>"},{"location":"gettingstarted/introduction/#user-locations","title":"User Locations","text":"<p>{     \"schema-url\": \"assets/charts/countries_chart.json\" }</p> <p>{     \"schema-url\": \"assets/charts/states_chart.json\" }</p>"},{"location":"gettingstarted/introduction/#configuration","title":"Configuration","text":"<p>The dingoPDM configuration can be accessed using:</p> <ul> <li>USB-C connected directly to the device, one at a time</li> <li>A CAN connection to one or many dingoPDMs at once using a USB to CAN adapter such as USB2CAN</li> </ul> <p>Configuration reading/writing and status monitoring are all done using the custom built Windows application DingoConfigurator </p>"},{"location":"gettingstarted/introduction/#wiring-example","title":"Wiring Example","text":""},{"location":"gettingstarted/introduction/#resources","title":"Resources","text":""},{"location":"gettingstarted/introduction/#github","title":"GitHub","text":"<p>dingoPDM is split between 3 GitHub repos.</p> <p>The latest releases can be found on the Releases page for each repo:</p> <ul> <li>Hardware: dingoPDM</li> <li>Firmware: dingoPDM_FW</li> <li>Software: DingoConfigurator</li> </ul> <p>dingoPDM-Max is split between 2 GitHub repos. </p> <p>The latest releases can be found on the Releases page for each repo:</p> <ul> <li>Hardware: dingoPDM-Max</li> <li>Firmware: dingoPDM-Max_FW</li> </ul> <p>Note</p> <p>dingoPDM will ship with the latest firmware release installed at the time of shipping, but new firmware is released frequently. </p> <p>Check the Releases page for a new release when receiving the dingoPDM and follow the Firwmare Updating instructions. </p>"},{"location":"gettingstarted/introduction/#store","title":"Store","text":"<p>Built and tested dingoPDMs can be purchased through the Dingo Electronics Store. </p> <p>All PDMs are assembled and tested in Virginia </p> <p>Dingo Electronics Store</p>"},{"location":"gettingstarted/introduction/#discord","title":"Discord","text":"<p>See invite link at the bottom right of the page</p> <p>Note</p> <p>If the link is expired, send a message on the store page </p>"},{"location":"gettingstarted/introduction/#facebook","title":"Facebook","text":"<p>See link at the bottom right of the page</p>"},{"location":"gettingstarted/introduction/#test-config-file","title":"Test Config File","text":"<p>When first powering on dingoPDM, whether one received from the store or built yourself, the included test file can be used to verify functionality. </p> <p>The test file includes a very basic setup:</p> <ul> <li>All outputs:<ul> <li>Enabled</li> <li>Set to turn on with input 1</li> <li>Set to their max current limit with endless reset</li> </ul> </li> <li>Input 1 set to: <ul> <li>Pullup</li> <li>Invert</li> <li>Momentary</li> </ul> </li> </ul> <p>Connect input 1 to ground to turn all outputs on. </p>"},{"location":"gettingstarted/introduction/#changing-can-id","title":"Changing CAN ID","text":"<p>The CAN Base ID default value is 2000. </p> <p>To change this, modify the value in the DeviceTree and press <code>Update</code> and then <code>Burn</code> to save the setting. </p> <p>On the next power up, the CAN Base ID will be updated. </p>"},{"location":"gettingstarted/introduction/#goals","title":"Goals","text":"<ul> <li> Learn more about PDMs and high DC current devices</li> <li> Learn about developing firmware for a more complex STM32 based project</li> <li> Create a low cost device that my friends and I can use in our project cars</li> <li> Layout the board to fit simple case designs<ul> <li> 3D printed top shell and flat aluminum heatsinks (no machining)</li> </ul> </li> <li> Use low cost 1oz/0.5oz 4 layer PCBs (low cost 2oz/1oz now available from JLCPCB)</li> <li> Share my work with others for reference, inspiration or collaboration. </li> <li> Document the project in a professional way to make it easy to use and access</li> <li> Develop an easy to use configuration PC software</li> <li> Offer fully built devices for sale</li> </ul> <p>Info</p> <p>If this project helps you in any way, I'd appreciate a message!</p>"},{"location":"gettingstarted/introduction/#project-status","title":"Project Status","text":"<ul> <li> : Complete</li> <li> : In Progess</li> <li> : Not Started</li> </ul> Recent Open Items Status Finish case design Test thermal performance Support USB C to C cables Develop dingoPDM-Max Finish documentation Add device sleep Add verbose error handling Add keypad support Add PWM output support Switch-less bootloader Add soft HMI buttons Finish plots in software Move to ChibiOS"},{"location":"gettingstarted/introduction/#disclaimer","title":"Disclaimer","text":"<p>Warning</p> <p>Please note that this product has been designed by a hobbyist, not a professional.  It is intended for off-road and testing use only.  Users should operate the product at their own discretion and risk.  The designer explicitly disclaims any responsibility for damage or injury that may result from the use of this product.</p>"},{"location":"hardware/case/","title":"Case","text":""},{"location":"hardware/case/#case","title":"Case","text":"<p>The mechanical design is centered around simple designs that can be created in a home shop. </p> <ul> <li>3D Printed Case</li> <li>Flat aluminum heatsink plate</li> <li>Flat aluminum baseplate</li> <li>The heatsink is designed to be 2 pieces. A heatsink plate and a baseplate<ul> <li>The heatsink plate provides clearance for the THT pins of the Deutsch connectors and the RedCube terminal while getting as close to the Profets as possible</li> <li> <p>Warning</p> The heatsink plate should be covered on both sides with a thermal pad material to electricaly isolate the heatsink while still providing a thermal interface (Example: 3M 5583S) </li> <li>The baseplate holds the case and also sandwiches the spacer plate to the PCB</li> </ul> </li> </ul>"},{"location":"hardware/case/#exploded-assembly","title":"Exploded Assembly","text":"ID Description Details Qty 1 Baseplate <code>Aluminum 6061</code> 1 2 Heatsink <code>Aluminum 6061</code> 1 3 Case <code>3D Print</code> 1 4.1 PCB 1 5.1 Ring Lug <code>M6</code> or <code>1/4\"</code> 1 5.2 Lug Washers <code>M6 Flat</code> 2 5.3 Lug Screws <code>M6x1.0x14mm</code> 2 5.5 Case Washers <code>M6 Flat</code> 4 5.6 Case Screws <code>M6x1.0x14mm</code> 4 5.7 PCB Washers <code>M3 Flat</code> 4 5.8 PCB Screws <code>M3x0.5x12mm</code> 4 6 DT Connector <code>12 Pin</code> 1 10.1 Light Pipe <code>PLPC2-10MM</code> 3 13 Connector Screws <code>No. 6, 5/8\" Thread Forming</code> 2"},{"location":"hardware/case/#models","title":"Models","text":"<p>Models of the baseplate, heatsink and case can be found here:</p> <p>Case STEP Files</p> <p>Complete STEP File (DingoPDM_V7_4.step)</p>"},{"location":"hardware/checklist/","title":"Testing new boards","text":""},{"location":"hardware/checklist/#testing-new-boards","title":"Testing new boards","text":"<p>These instructions will guide you through verifying some of the basic connections and functionalities. It's adviced to go through the next steps before installing the main connector</p> # Task Link 1 Measure resistance between: TODO: verify measurement points 2 Connect USB and verify: 3v3, Power LED 3 Connect +12v and verify 5v 4 Write FW to processor FW Releases 5 Verify that the <code>Status</code> LED goes green after one power cycle of red LED (writed default config) 6 Enable each output in the Configurator. Verify that the output A values are 0. 7 Measure +12V at each output pad"},{"location":"hardware/connections/","title":"Connections","text":""},{"location":"hardware/connections/#connections","title":"Connections","text":""},{"location":"hardware/connections/#connectors","title":"Connectors","text":"ID Connector Details Qty Note 1 DT 12 Pos Connector <code>DT06-12SA</code> 1 DT 12 Wedgelock <code>W12S</code> 1 14-16AWG Socket <code>0462-209-16141</code> 2 16-20AWG Socket <code>0462-201-16141</code> 10 2 12V DC Power Lug <code>M6</code> or <code>1/4\"</code> lug 1 Large gauge wire required (4 to 10AWG) 3 Ground Lug <code>M6</code> or <code>1/4\"</code> lug 1 Small gauge wire can be used (18 to 20 AWG) 4 USB Type C 1 USB C-C cables are not supported with v7.2 hardware"},{"location":"hardware/connections/#usb","title":"USB","text":"<p>Warning</p> <p>USB C-C cables are not supported with v7.2 hardware</p> Hardware USB C-C USB A-C v7.2 v7.3 and up"},{"location":"hardware/connections/#pinout","title":"Pinout","text":""},{"location":"hardware/connections/#dingopdm","title":"dingoPDM","text":"Pin Function Current 1 CAN L 2 CAN H 3 Output 8 8A 4 Output 7 8A 5 Output 6 8A 6 Output 5 8A 7 Output 1 13A 8 Input 1 9 Output 4 8A 10 Output 3 8A 11 Input 2 12 Output 2 13A <p>Note</p> <p>The current outputs are estimates and based on the maximum current rated by Deutsch. The possible current may be higher depending on the installation and configuration. </p> <p>Note</p> <p>No internal terminating resistor on CAN connection, must be added externally    </p>"},{"location":"hardware/connections/#dingopdm-max","title":"dingoPDM-Max","text":"Pin Function Current 1 Output 4 26A 2 Output 4 26A 3 CAN L 4 CAN H 5 Output 3 26A 6 Output 3 26A 7 Output 1 26A 8 Output 1 26A 9 Input 1 10 Input 2 11 Output 2 26A 12 Output 2 26A <p>Note</p> <p>The current outputs are estimates and based on the maximum current rated by Deutsch. The possible current may be higher depending on the installation and configuration. </p> <p>Note</p> <p>No internal terminating resistor on CAN connection, must be added externally</p>"},{"location":"hardware/connections/#test-points","title":"Test Points","text":"Label Function MCU Pin I2C I2C1 Clock <code>PB6</code> I2D I2C1 Data <code>PB7</code> CR CAN Receive <code>PB8</code> CT CAN Transmit <code>PB9</code> E1 Extra 1 <code>PC10</code> E2 Extra 2 <code>PC11</code> E3 Extra 3 <code>PC13</code> GND Ground <code>Ground</code> TagConnect Debugger"},{"location":"hardware/connections/#wipers","title":"Wipers","text":"<p>To control a wiper motor directly from dingoPDM a WiperModule is required.  The WiperModule uses 3 relays to properly control the slow, fast and brake functions of a wiper motor.  The internal connections are made based on the slow input (which also supplies all power to the motor) and the fast input.  The ground and park signals are passed through the module. </p> <p>Information about the WiperModule can be found here: WiperModule</p> <p> </p>"},{"location":"hardware/pcb/","title":"PCB","text":""},{"location":"hardware/pcb/#introduction","title":"Introduction","text":"<p>There are two versions of dingoPDM, standard and Max. </p> <p>dingoPDM = 8 outputs (shown above, low and medium current)</p> <p>dingoPDM-Max = 4 outputs (high current)</p>"},{"location":"hardware/pcb/#components","title":"Components","text":"<p>dingoPDM</p> <ul> <li>2x Profet <code>BTS7002-1EPP</code><ul> <li>2x 14A outputs </li> <li>With flyback diodes</li> </ul> </li> <li>3x Profet <code>BTS7008-2EPA</code><ul> <li>6x 8A outputs</li> </ul> </li> <li>2x Digital Inputs<ul> <li>Selectable pullup/pulldown</li> </ul> </li> <li><code>STM32F446RET6</code> Microcontroller</li> <li>256Kbit <code>FRAM</code><ul> <li>Settings storage</li> </ul> </li> <li>CAN transceiver<ul> <li>No terminating resistor</li> </ul> </li> <li>Board temperature measured using <code>MCP9808</code></li> <li>2x LEDs for power and temperature status</li> <li>2x LEDs for status</li> <li>Onboard 12V to 5V to 3.3V regulation</li> <li>2x M6 lug 12V power connection<ul> <li>Ground connection not used for output power, can be a small gauge (ex: 18AWG or 20AWG)</li> </ul> </li> <li>12V voltage measurement</li> <li>THT test pads for easy connection of logic analyzer (ex: Saleae leads)</li> <li>Deutsch <code>DT 12 pin</code> connector</li> </ul> <p>dingoPDM-Max (only differences listed)</p> <ul> <li>4x Profet <code>BTS70012-1ESP</code><ul> <li>4x 26A outputs </li> <li>With flyback diodes</li> </ul> </li> </ul>"},{"location":"hardware/pcb/#kicad","title":"KiCad","text":"<ul> <li>Designed using <code>KiCad v8.0.4</code></li> </ul>"},{"location":"hardware/pcb/#design-notes","title":"Design Notes","text":"<ul> <li>Prior to V6, the design had a lot of features which meant a lot of parts</li> <li>To make the board cheaper, easier to source/produce and quicker to test the design was drastically simplified</li> <li>The Deutsch DT connector was selected due to it's popularity, part availability and ease of use</li> <li>BTS724 was used on V6, but removed for V7 due to thermal issues. It wouldn't trip until a very high current. </li> </ul>"},{"location":"hardware/pcb/#mcu-pinouts","title":"MCU Pinouts","text":""},{"location":"hardware/pcb/#dingopdm","title":"dingoPDM","text":"MCU Pin Function Type <code>PA0</code> Output 1 Current Sense (IS) Analog Input <code>PA1</code> Output 5/6 Current Sense (IS) Analog Input <code>PA2</code> Output 7/8 Current Sense (IS) Analog Input <code>PA3</code> Battery Voltage Sense Analog Input <code>PA4</code> Output 8 Control Input (IN) Digital Output <code>PA5</code> Output 7/8 Sense Select (DSEL) Digital Output <code>PA6</code> Output 7/8 Sense Enable (DEN) Digital Output <code>PA7</code> Output 7 Control Input (IN) Digital Output <code>PA8</code> - - <code>PA9</code> USB VBUS Sense Digital Input <code>PA10</code> Input 1 Digital Input <code>PA11</code> USB D- (DM) <code>PA12</code> USB D+ (DP) <code>PA13</code> SWDIO <code>PA14</code> SWCLK <code>PA15</code> - - <code>PB0</code> Output 5/6 Sense Enable (DEN) Digital Output <code>PB1</code> Output 1 Control Input (IN) Digital Output <code>PB2</code> Output 1 Sense Enable (DEN) Digital Output <code>PB3</code> SWO <code>PB4</code> - - <code>PB5</code> - - <code>PB6</code> I2C1 SCL <code>PB7</code> I2C1 SDA <code>PB8</code> CAN RX <code>PB9</code> CAN TX <code>PB10</code> Output 1 Control Input (IN) Digital Output <code>PB12</code> Output 4 Control Input (IN) Digital Output <code>PB13</code> - - <code>PB14</code> Output 3/4 Sense Select (DSEL) Digital Output <code>PB15</code> Output 3/4 Sense Enable (DEN) Digital Output <code>PC0</code> Status LED Digital Output <code>PC1</code> Error LED Digital Output <code>PC2</code> Output 2 Current Sense (IS) Analog Input <code>PC3</code> Output 3/4 Current Sense (IS) Analog Input <code>PC4</code> Output 6 Control Input (IN) Digital Output <code>PC5</code> Output 5/6 Sense Select (DSEL) Digital Output <code>PC6</code> Output 3 Control Input (IN) Digital Output <code>PC7</code> Output 2 Sense Enable (DEN) Digital Output <code>PC8</code> Output 2 Control Input (IN) Digital Output <code>PC9</code> Input 2 Digital Input <code>PC10</code> Extra 1 Undefined <code>PC11</code> Extra 2 Undefined <code>PC12</code> CAN Standby Digital Output <code>PC13</code> Extra 3 Undefined <code>PC14</code> - - <code>PC15</code> - - <code>PD2</code> - - <code>PH0</code> Oscillator <code>PH1</code> Oscillator"},{"location":"hardware/pcb/#dingopdm-max","title":"dingoPDM-Max","text":"MCU Pin Function Type <code>PA0</code> Output 3 Current Sense (IS) Analog Input <code>PA1</code> Output 4 Current Sense (IS) Analog Input <code>PA2</code> - <code>PA3</code> Battery Voltage Sense Analog Input <code>PA4</code> - <code>PA5</code> Output 4 Sense Enable (DEN) Digital Output <code>PA6</code> Output 4 Control Input (IN) Digital Output <code>PA7</code> - <code>PA8</code> - - <code>PA9</code> USB VBUS Sense Digital Input <code>PA10</code> Input 1 Digital Input <code>PA11</code> USB D- (DM) <code>PA12</code> USB D+ (DP) <code>PA13</code> SWDIO <code>PA14</code> SWCLK <code>PA15</code> - - <code>PB0</code> Output 3 Control Input (IN) Digital Output <code>PB1</code> - <code>PB2</code> - <code>PB3</code> SWO <code>PB4</code> - - <code>PB5</code> - - <code>PB6</code> I2C1 SCL <code>PB7</code> I2C1 SDA <code>PB8</code> CAN RX <code>PB9</code> CAN TX <code>PB10</code> - <code>PB12</code> - <code>PB13</code> Output 1 Sense Enable (DEN) Digital Output <code>PB14</code> Output 1 Control Input (IN) Digital Output <code>PB15</code> - <code>PC0</code> Status LED Digital Output <code>PC1</code> Error LED Digital Output <code>PC2</code> Output 2 Current Sense (IS) Analog Input <code>PC3</code> Output 1 Current Sense (IS) Analog Input <code>PC4</code> - Digital Output <code>PC5</code> Output 3 Sense Enable (DEN) Digital Output <code>PC6</code> Output 2 Sense Enable (DEN) Digital Output <code>PC7</code> Output 2 Control Input (IN) Digital Output <code>PC8</code> - <code>PC9</code> Input 2 Digital Input <code>PC10</code> Extra 1 Undefined <code>PC11</code> Extra 2 Undefined <code>PC12</code> CAN Standby Digital Output <code>PC13</code> Extra 3 Undefined <code>PC14</code> - - <code>PC15</code> - - <code>PD2</code> - - <code>PH0</code> Oscillator <code>PH1</code> Oscillator"},{"location":"hardware/pcb/#boms","title":"BOMs","text":"<p>dingoPDM BOM</p> <p>dingoPDM-Max BOM</p>"},{"location":"hardware/thermal/","title":"Thermal","text":""},{"location":"hardware/thermal/#full-load-test","title":"Full Load Test","text":"<p>{     \"schema-url\": \"assets/charts/dingopdm_stresstest.json\" }</p> <p>{     \"schema-url\": \"assets/charts/dingopdmmax_stresstest.json\" }</p> <p>Tip</p> <ul> <li>Pan: click + drag</li> <li>Zoom: mouse wheel</li> <li>Reset: double click</li> </ul> <p>Warning</p> <p>If chart does not load, refresh the page</p> <ul> <li>Full load tests were conducted with a dummy load at 71A total.</li> <li>The device was mounted horizontaly (worst case).</li> <li>Ambient temperature <code>19\u00b0C</code></li> <li>Resistive load on all outputs</li> <li>Temperature taken with onboard temperature sensor, unless otherwise noted</li> <li>All outputs on and under load</li> <li>All outputs wired using 14AWG TXL in free air and approx. 2 feet long</li> <li>Battery power wired using 4AWG cable and copper lug</li> <li>Ground wired using 20AWG TXL</li> <li><code>DC_100</code><ul> <li><code>100%</code> duty cycle</li> <li>No case</li> </ul> </li> <li><code>DC_50</code><ul> <li><code>50%</code> duty cycle @ <code>400Hz</code></li> <li>No case</li> </ul> </li> <li><code>CLOSED</code><ul> <li><code>100%</code> duty cycle</li> <li>Case installed</li> </ul> </li> <li><code>TOP</code><ul> <li><code>100%</code> duty cycle</li> <li>Case installed</li> <li>Temperature taken at top of Profet (output 3/4) using thermocouple</li> </ul> </li> <li><code>Yellow</code><ul> <li>Warning temperature limit <code>55\u00b0C</code></li> <li>Reaction: warning message sent</li> </ul> </li> <li><code>Red</code><ul> <li>Critical temperature limit <code>80\u00b0C</code></li> <li>Reaction: device shutdown, power cycle required</li> </ul> </li> </ul> <p>Notes</p> <ul> <li>Thermal performance is similar with or without PWM (on resistive loads)</li> <li>The onboard temperature sensor follows the junction temperature within a few degrees after 10 minutes</li> <li>Installing the case increases the temperature by a maximum of <code>5\u00b0C</code></li> <li>The temperatures seen by the onboard sensor and thermocouple are much lower than the maximum temperature of the Profet junction <code>150\u00b0C</code></li> </ul>"},{"location":"hardware/thermal/#thermal-images","title":"Thermal Images","text":"<p>These images were captured during the 100% duty cycle full load test. </p> <p>The highest temperature recorded was 61\u00b0C at the top of the output 3/4 Profet (BTS7008-2EPA). </p> <p> </p> <p>Notes</p> <ul> <li>Deutsch DT connectors have an operating temperature range up to <code>125\u00b0C</code></li> <li>While we do not know the actual internal temperature, the highest recorded external temperature during these tests was around <code>50\u00b0C</code></li> <li>That is much lower than the rated operating temperature, which suggests higher current may be possible</li> </ul>"},{"location":"hardware/thermal/#thermal-resistance","title":"Thermal Resistance","text":"<p>Before building or testing any hardware, we can calculate the expected temperature on the top of the Profet. </p> <p>To do this, we need these values:</p> <ul> <li>Ambient temperature (\u00b0C)</li> <li>Total current (A)</li> <li>R<sub>thJA</sub> (K/W)<ul> <li>See Infineon datasheet section 4.4</li> <li>Thermal Resistance Junction to Ambient, (K/W)=(C/W)</li> <li>Temperature rise per dissipated watt from the internal junction to ambient</li> <li>Value calculated by Infineon at natural convection on a 4 layer PCB:<ul> <li>2oz outer copper</li> <li>1oz inner copper</li> <li>76.2mm x 114.3mm board</li> </ul> </li> <li>The resulting value is added to the ambient temperature</li> <li>Infineon uses Kelvin/Watt, this is equal to Celsius/Watt</li> </ul> </li> <li>\u03a8<sub>JTOP</sub> (K/W)<ul> <li>See Infineon datasheet section 4.4</li> <li>Thermal Characterization Parameter Junction Top, (K/W)=(C/W)</li> <li>Thermal resistance between the internal junction and the top of chip case</li> <li>Value calculated by Infineon using the same test parameters as R<sub>thJA</sub> above</li> <li>The resulting value will be subtracted from the junction temperature to find the expected temperature at the top of the chip case</li> </ul> </li> <li>R<sub>DS(ON)</sub> (m\u03a9)<ul> <li>See Infineon datasheet section 7.5.1</li> <li>On State Resistance (m\u03a9)</li> <li>Resistance between the battery connection and the output when the Profet is on, varies with junction temperature</li> <li>Use this to calculate the heat generated by the chip</li> <li>Assuming the junction temperature is 60\u00b0C, use R<sub>DS(ON)</sub> of 3.2m\u03a9 and 11m\u03a9</li> </ul> </li> </ul> <p>BTS7002-1EPP</p> <p><code>Power(W)</code> = (Current x R<sub>DS(ON)</sub>) x Current = 12<sup>2</sup> x 3.2 = <code>0.461 W</code></p> <p><code>Junction Temp(\u00b0C)</code> = Ambient + (Power x R<sub>thJA</sub>) = 19 + (0.461 x 30.7) = <code>33\u00b0C</code></p> <p><code>Case Top(\u00b0C)</code> = Junction Temp - (Power * \u03a8<sub>JTOP</sub>) = 33 - (0.461 x 3) = <code>32\u00b0C</code></p> <p>BTS7008-2EPA</p> <p><code>Power(W)</code> = (Current x R<sub>DS(ON)</sub>) x Current = 8<sup>2</sup> x 11 = <code>0.704 W</code> x 2 = <code>1.408 W</code></p> <p><code>Junction Temp(\u00b0C)</code> = Ambient + (Power x R<sub>thJA</sub>) = 19 + (1.408 x 30.9) = <code>63\u00b0C</code></p> <p><code>Case Top(\u00b0C)</code> = Junction Temp - (Power * \u03a8<sub>JTOP</sub>) = 63 - (1.408 x 1.7) = <code>60\u00b0C</code></p> <p>Table format:</p> Model R<sub>DS(ON)</sub> @ 25\u00b0C (m\u03a9) R<sub>DS(ON)</sub> @ 150\u00b0C (m\u03a9) R<sub>DS(ON)</sub> (m\u03a9) Current Per Output (A) Dissipated Power (W) # Channels Total Dissipated Power (W) Ambient Temp (\u00b0C) R<sub>thJA</sub> (C/W) Junction Temp (\u00b0C) \u03a8<sub>JTOP</sub> (C/W) Case Top (\u00b0C) BTS7002-1EPP 2.6 4.8 3.2 12 0.461 1 0.461 19 30.7 33 3 32 BTS7008-2EPA 9 16 11 8 0.704 2 1.408 19 30.9 63 1.7 60 <p>Notes</p> <ul> <li>The BTS7008-2EPA expected case temperature (<code>60\u00b0C</code>) is close to the measured values<ul> <li>Thermocouple = <code>55\u00b0C</code> <ul> <li>May be reduced due to glue used to hold thermocouple</li> </ul> </li> <li>Thermal camera = <code>61\u00b0C</code></li> </ul> </li> <li>The BTS7002-1EPP expected case temperature (<code>32\u00b0C</code>) is lower than the measured value<ul> <li>Thermal camera = <code>50\u00b0C</code></li> <li>This may be caused by the adjacent BTS7008-2EPA which is at a higher temperature of <code>60\u00b0C</code></li> </ul> </li> <li>The Profet maximum junction temperature is <code>150\u00b0C</code>, much higher than the temperatures we are seeing in these full load tests</li> </ul>"},{"location":"software/canboard/","title":"CANBoard","text":""},{"location":"software/devicetree/","title":"DeviceTree","text":"<p>The DeviceTree is divided into 2 sections:</p> <ul> <li> <p><code>DeviceTree</code></p> </li> <li> <p><code>Device Management</code></p> </li> </ul>"},{"location":"software/devicetree/#devicetree","title":"DeviceTree","text":""},{"location":"software/devicetree/#icons","title":"Icons","text":"<p>Each device type has a different icon in the DeviceTree. </p> <p>When the device is detected the icon change from gray to green. </p> Device Type Icon dingoPDM CANBoard CANMsgLog <p>Note</p> <p>Devices are considered detected when CAN messages are received in their ID range based on the <code>Base ID</code></p>"},{"location":"software/devicetree/#device-order","title":"Device Order","text":"<p>The order of devices in the DeviceTree is based on the <code>Base ID</code>.</p> <p>The lowest <code>Base ID</code> are shown at the top. </p> <p><code>CANMsgLog</code> always has a <code>Base ID</code> value of <code>9999</code>, making sure it is always at the bottom.</p>"},{"location":"software/devicetree/#device-management","title":"Device Management","text":""},{"location":"software/devicetree/#type","title":"Type","text":"<p>Select the <code>Type</code> of device to add. </p>"},{"location":"software/devicetree/#name","title":"Name","text":"<p>Set or edit the <code>Name</code> of the device in the DeviceTree.</p>"},{"location":"software/devicetree/#base-id","title":"Base ID","text":"<p>Set or edit the <code>Base ID</code> of the device. </p> <p>Info</p> <p>Currently <code>Base ID</code> must be within the 11 bit range of the standard CAN ID (0-2048)</p>"},{"location":"software/devicetree/#add","title":"Add","text":"<p><code>Add</code> a new device to the DeviceTree with the <code>Name</code> and <code>Base ID</code> as set.</p>"},{"location":"software/devicetree/#update","title":"Update","text":"<p><code>Update</code> the <code>Name</code> and/or <code>Base ID</code> values of the selected device in the DeviceTree.</p>"},{"location":"software/devicetree/#remove","title":"Remove","text":"<p><code>Remove</code> the selected device from the DeviceTree. </p>"},{"location":"software/dingopdm/","title":"dingoPDM","text":""},{"location":"software/dingopdm/#settings","title":"Settings","text":""},{"location":"software/dingopdm/#can-input","title":"CAN Input","text":""},{"location":"software/dingopdm/#enable","title":"Enable","text":"<p>The CAN Input is enabled and evaluated in the device.  Setting the unused inputs to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#id","title":"ID","text":""},{"location":"software/dingopdm/#low-byte","title":"Low Byte","text":""},{"location":"software/dingopdm/#high-byte","title":"High Byte","text":""},{"location":"software/dingopdm/#operator","title":"Operator","text":""},{"location":"software/dingopdm/#mask","title":"Mask","text":""},{"location":"software/dingopdm/#mode","title":"Mode","text":""},{"location":"software/dingopdm/#examples","title":"Examples","text":""},{"location":"software/dingopdm/#virtual-input","title":"Virtual Input","text":""},{"location":"software/dingopdm/#enable_1","title":"Enable","text":"<p>The Virtual Input is enabled and evaluated in the device.  Setting the unused inputs to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#not","title":"Not","text":""},{"location":"software/dingopdm/#variable","title":"Variable","text":""},{"location":"software/dingopdm/#condition","title":"Condition","text":""},{"location":"software/dingopdm/#mode_1","title":"Mode","text":""},{"location":"software/dingopdm/#examples_1","title":"Examples","text":""},{"location":"software/dingopdm/#wipermodule","title":"WiperModule","text":"<p>To control a wiper motor directly from dingoPDM a WiperModule is required.  The WiperModule uses 3 relays to properly control the slow, fast and brake functions of a wiper motor.  The internal connections are made based on the slow input (which also supplies all power to the motor) and the fast input.  The ground and park signals are passed through the module. </p> <p>Information about the WiperModule can be found here: WiperModule</p> <p> </p>"},{"location":"software/dingopdm/#wiper","title":"Wiper","text":""},{"location":"software/dingopdm/#enable_2","title":"Enable","text":"<p>The Wiper is enabled and evaluated in the device.  Setting the unused Wiper to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#state","title":"State","text":""},{"location":"software/dingopdm/#speed","title":"Speed","text":""},{"location":"software/dingopdm/#slow","title":"Slow","text":""},{"location":"software/dingopdm/#fast","title":"Fast","text":""},{"location":"software/dingopdm/#mode_2","title":"Mode","text":""},{"location":"software/dingopdm/#slow-in","title":"Slow In","text":""},{"location":"software/dingopdm/#fast-in","title":"Fast in","text":""},{"location":"software/dingopdm/#intermittent-in","title":"Intermittent In","text":""},{"location":"software/dingopdm/#on-in","title":"On In","text":""},{"location":"software/dingopdm/#speed-in","title":"Speed In","text":""},{"location":"software/dingopdm/#park-in","title":"Park In","text":""},{"location":"software/dingopdm/#park-stop-level","title":"Park Stop Level","text":""},{"location":"software/dingopdm/#swipe-in","title":"Swipe In","text":""},{"location":"software/dingopdm/#wash-in","title":"Wash In","text":""},{"location":"software/dingopdm/#washwipe-cycles","title":"Wash/Wipe Cycles","text":""},{"location":"software/dingopdm/#wiper-speed-map","title":"Wiper Speed Map","text":""},{"location":"software/dingopdm/#speed-0-7","title":"Speed 0-7","text":""},{"location":"software/dingopdm/#wiper-intermittent-time","title":"Wiper Intermittent Time","text":""},{"location":"software/dingopdm/#intermittent-time-1-6","title":"Intermittent Time 1- 6","text":""},{"location":"software/dingopdm/#flasher","title":"Flasher","text":""},{"location":"software/dingopdm/#enable_3","title":"Enable","text":"<p>The Flasher is enabled and evaluated in the device.  Setting the unused Flahser to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#single","title":"Single","text":""},{"location":"software/dingopdm/#input","title":"Input","text":""},{"location":"software/dingopdm/#output","title":"Output","text":""},{"location":"software/dingopdm/#on-time","title":"On Time","text":""},{"location":"software/dingopdm/#off-time","title":"Off Time","text":""},{"location":"software/dingopdm/#starter-disable","title":"Starter Disable","text":""},{"location":"software/dingopdm/#enable_4","title":"Enable","text":"<p>The Starter Disable is enabled and evaluated in the device.  Setting the unused Starter Disable to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#input_1","title":"Input","text":""},{"location":"software/dingopdm/#o1-8","title":"O1-8","text":""},{"location":"software/introduction/","title":"Introduction","text":"<p>Bug</p> <p>Software documentation is a work in progress</p> <p>DingoConfigurator is a Windows application designed to configure and monitor dingoPDM. </p> <p></p>"},{"location":"software/introduction/#download","title":"Download","text":"<p>The latest version can be downloaded here: DingoConfigurator</p>"},{"location":"software/introduction/#installation","title":"Installation","text":"<p>Info</p> <p>The installer has not been built yet.</p> <p>First install STM32CubeProgrammer </p> <p>Download the <code>.zip</code> from the link above, unzip and run <code>DingoConfigurator.exe</code></p>"},{"location":"software/introduction/#supported-devices","title":"Supported Devices","text":"<p>DingoConfigurator currently supports these devices:</p> Manufacturer Device Dingo Electronics dingoPDM Dingo Electronics CANBoard <p>Note</p> <p>New devices can/will be added when I have access to the hardware </p>"},{"location":"software/introduction/#supported-can-interfaces","title":"Supported CAN Interfaces","text":"<p>DingoConfigurator currently supports these CAN interfaces.</p> Manufacturer Device Dingo Electronics USB2CAN PEAK-System PCAN-USB <p>Note</p> <p>New devices can/will be added when I have access to the hardware </p>"},{"location":"software/introduction/#sections","title":"Sections","text":""},{"location":"software/messagelist/","title":"MessageList","text":""},{"location":"software/msglog/","title":"CANMsgLog","text":""},{"location":"software/toolbar/","title":"ToolBar","text":"<p>The ToolBar is divided into 3 sections:</p> <ul> <li> <p>File Operations</p> </li> <li> <p>Interface Connection</p> </li> <li> <p>Settings Communication</p> </li> </ul> <p>Note</p> <p>The sections of the ToolBar can be rearranged by dragging the sections using the handle on the left of each section</p>"},{"location":"software/toolbar/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Function Key New Ctrl+N Open Ctrl+O Save Ctrl+S Connect Ctrl+C Disconnect Ctrl+D Read Ctrl+R Write Ctrl+W Burn Ctrl+B"},{"location":"software/toolbar/#file-operations","title":"File Operations","text":"<p>DingoConfigurator uses standard <code>JSON</code> configuration files with the extension <code>.dco</code>. </p> <p>The modified extension enables setting the Windows default app to DingoConfigurator.</p> <p>Warning</p> <p>Do not edit the <code>.dco</code> file outside of DingoConfigurator unless you are familiar with <code>JSON</code>. </p> <p>Errors will make the file unusable with DingoConfigurator. </p>"},{"location":"software/toolbar/#new","title":"New","text":"<p><code>New</code> clears the current configuration.</p> <p>No file is created, just a new clean configuration. </p> <p>After adding new devices, press <code>Save As</code> to save the new <code>.dco</code> file. </p> <p>Warning</p> <p>Save the current configuration before pressing <code>New</code> to prevent losing the current configuration settings</p>"},{"location":"software/toolbar/#open","title":"Open","text":"<p><code>Open</code> launches a file dialog to select a <code>.dco</code> file. </p> <p>The directory will repeat to the same directory as previously used after the first use. </p> <p>Warning</p> <p><code>Open</code> clears the current configuration, <code>Save</code> before pressing <code>Open</code> to prevent losing the current configuration settings</p>"},{"location":"software/toolbar/#save","title":"Save","text":"<p><code>Save</code> saves the <code>.dco</code> file after an <code>Open</code> or <code>Save As</code></p>"},{"location":"software/toolbar/#save-as","title":"Save As","text":"<p><code>Save As</code> saves a new <code>.dco</code> file from a new configuration or saves a copy of an existing configuration</p>"},{"location":"software/toolbar/#interface-connection","title":"Interface Connection","text":""},{"location":"software/toolbar/#interfaces","title":"Interfaces","text":"<p>Select the interface to connect to the devices. </p> <p>Currently supported interfaces:</p> Interface USB2CAN PCAN USB <p>Note</p> <p>USB only allows connection to one device at a time, versus CAN which connects to all devices on the bus</p>"},{"location":"software/toolbar/#port","title":"Port","text":"<p>Select the COM port to use with the selected interface, if required. </p> <p><code>PCAN</code> does not require a COM port, therefore the port selection is disabled when <code>PCAN</code> is selected.</p>"},{"location":"software/toolbar/#refresh","title":"Refresh","text":"<p><code>Refresh</code> updates the <code>Port</code> selection with the current list of available COM ports. </p>"},{"location":"software/toolbar/#baud","title":"Baud","text":"<p>Select the required CAN baud rate. </p> <p><code>USB</code> does not require a baud rate, therefore the baud rate selection is disabled when <code>USB</code> is selected. </p>"},{"location":"software/toolbar/#connect","title":"Connect","text":"<p><code>Connect</code> opens a connection to the interface device.</p> <p>After a successful connection, the StatusBar at the bottom of the window should update with a green box and the name of the interface followed by \"Connected\".</p> <p>The StatusBar will also update with the number of Detected Devices in the bottom right. </p> <p>Tip</p> <p>The Detected Devices count means messages in the range of the configured devices are being received.</p> <p>For each device the count is increased by 1 </p>"},{"location":"software/toolbar/#disconnect","title":"Disconnect","text":"<p><code>Disconnect</code> closes the currently open connection. </p>"},{"location":"software/toolbar/#settings-communication","title":"Settings Communication","text":"<p>The <code>Settings Communication</code> section of the ToolBar enables uploading, downloading and burning the configuration to the currently selected Device. </p> <p>Tip</p> <p>To enable the buttons, select a device in the DeviceTree. </p> <p>Note</p> <p>Some devices do not support settings communication, therefore the buttons are disabled. </p>"},{"location":"software/toolbar/#read","title":"Read","text":"<p><code>Read</code> reads the settings from the selected device and updates the current configuration. </p> <p>Warning</p> <p><code>Read</code> will overwrite the current configuration settings for the selected device</p>"},{"location":"software/toolbar/#write","title":"Write","text":"<p><code>Write</code> sends the current configuration to the selected device. </p>"},{"location":"software/toolbar/#burn","title":"Burn","text":"<p><code>Burn</code> sends a burn command to the selected device. </p> <p>This command tells the device to write the current configuration to non-volatile memory. </p> <p>Danger</p> <p>If a <code>Burn</code> is not performed after a <code>Download</code> the current configuration in the device will be lost on a power cycle</p>"},{"location":"software/toolbar/#sleepwake","title":"Sleep/Wake","text":"<p><code>Sleep</code> sends a sleep command to the selected device. </p> <p>This command immediately sets the device to sleep state. </p> <p><code>Wake</code> sends a wake command to the selected device. </p>"}]}